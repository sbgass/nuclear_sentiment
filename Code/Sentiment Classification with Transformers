{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Sentiment Classification with Transformers","provenance":[{"file_id":"1f32gj5IYIyFipoINiC8P3DvKat-WWLUK","timestamp":1604612373870}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"33aa1abf123541158de12632ac6f3cab":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_57a4fd2ab9e04d2d82d9fde9943ebe8c","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_2e8f3e58b7224d01b65b98c621d72144","IPY_MODEL_013b3fde6d9a47ddbe76c8c773b3db03"]}},"57a4fd2ab9e04d2d82d9fde9943ebe8c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"2e8f3e58b7224d01b65b98c621d72144":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_52a2ca9193d24052852ef24c19cb7d23","_dom_classes":[],"description":"Downloading: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":231508,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":231508,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_a67da284b353409d871eceb0ba9e4881"}},"013b3fde6d9a47ddbe76c8c773b3db03":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_561664df800742c4b8eaa184bdeebe66","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 232k/232k [00:00&lt;00:00, 481kB/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d5efa4c29da2408eaa077e9c3089c77a"}},"52a2ca9193d24052852ef24c19cb7d23":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"a67da284b353409d871eceb0ba9e4881":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"561664df800742c4b8eaa184bdeebe66":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d5efa4c29da2408eaa077e9c3089c77a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"_lTXsMK3sNYr","executionInfo":{"status":"ok","timestamp":1607564096435,"user_tz":480,"elapsed":1804,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["import os\n","import re\n","from tqdm import tqdm\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.metrics import accuracy_score, roc_curve, auc\n","%matplotlib inline"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"u2c6mWB0XHtM","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":72},"executionInfo":{"status":"ok","timestamp":1607463449667,"user_tz":480,"elapsed":35106,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"a19a76ee-2491-4377-948e-0a6db18e7922"},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-9e779d01-6788-4ffd-b82c-07970092e1b3\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9e779d01-6788-4ffd-b82c-07970092e1b3\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving Tweets.csv to Tweets.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LzBj01foXTVR","colab":{"base_uri":"https://localhost:8080/","height":445},"executionInfo":{"status":"ok","timestamp":1607564126294,"user_tz":480,"elapsed":698,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"9d1eda83-2d7a-4a1d-d5f6-7d797df0018b"},"source":["Airline = pd.read_csv('Tweets.csv')\n","Airline.head(5)"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tweet_id</th>\n","      <th>airline_sentiment</th>\n","      <th>airline_sentiment_confidence</th>\n","      <th>negativereason</th>\n","      <th>negativereason_confidence</th>\n","      <th>airline</th>\n","      <th>airline_sentiment_gold</th>\n","      <th>name</th>\n","      <th>negativereason_gold</th>\n","      <th>retweet_count</th>\n","      <th>text</th>\n","      <th>tweet_coord</th>\n","      <th>tweet_created</th>\n","      <th>tweet_location</th>\n","      <th>user_timezone</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>570306133677760513</td>\n","      <td>neutral</td>\n","      <td>1.0000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Virgin America</td>\n","      <td>NaN</td>\n","      <td>cairdin</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>@VirginAmerica What @dhepburn said.</td>\n","      <td>NaN</td>\n","      <td>2015-02-24 11:35:52 -0800</td>\n","      <td>NaN</td>\n","      <td>Eastern Time (US &amp; Canada)</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>570301130888122368</td>\n","      <td>positive</td>\n","      <td>0.3486</td>\n","      <td>NaN</td>\n","      <td>0.0000</td>\n","      <td>Virgin America</td>\n","      <td>NaN</td>\n","      <td>jnardino</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>@VirginAmerica plus you've added commercials t...</td>\n","      <td>NaN</td>\n","      <td>2015-02-24 11:15:59 -0800</td>\n","      <td>NaN</td>\n","      <td>Pacific Time (US &amp; Canada)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>570301083672813571</td>\n","      <td>neutral</td>\n","      <td>0.6837</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Virgin America</td>\n","      <td>NaN</td>\n","      <td>yvonnalynn</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>@VirginAmerica I didn't today... Must mean I n...</td>\n","      <td>NaN</td>\n","      <td>2015-02-24 11:15:48 -0800</td>\n","      <td>Lets Play</td>\n","      <td>Central Time (US &amp; Canada)</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>570301031407624196</td>\n","      <td>negative</td>\n","      <td>1.0000</td>\n","      <td>Bad Flight</td>\n","      <td>0.7033</td>\n","      <td>Virgin America</td>\n","      <td>NaN</td>\n","      <td>jnardino</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>@VirginAmerica it's really aggressive to blast...</td>\n","      <td>NaN</td>\n","      <td>2015-02-24 11:15:36 -0800</td>\n","      <td>NaN</td>\n","      <td>Pacific Time (US &amp; Canada)</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>570300817074462722</td>\n","      <td>negative</td>\n","      <td>1.0000</td>\n","      <td>Can't Tell</td>\n","      <td>1.0000</td>\n","      <td>Virgin America</td>\n","      <td>NaN</td>\n","      <td>jnardino</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>@VirginAmerica and it's a really big bad thing...</td>\n","      <td>NaN</td>\n","      <td>2015-02-24 11:14:45 -0800</td>\n","      <td>NaN</td>\n","      <td>Pacific Time (US &amp; Canada)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             tweet_id  ...               user_timezone\n","0  570306133677760513  ...  Eastern Time (US & Canada)\n","1  570301130888122368  ...  Pacific Time (US & Canada)\n","2  570301083672813571  ...  Central Time (US & Canada)\n","3  570301031407624196  ...  Pacific Time (US & Canada)\n","4  570300817074462722  ...  Pacific Time (US & Canada)\n","\n","[5 rows x 15 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"dWu2uZHmW_HY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607564129759,"user_tz":480,"elapsed":690,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"3b4efeb4-377f-4038-f064-f1dbd8e96688"},"source":["Airline['airline_sentiment'][Airline['airline_sentiment'] == 'neutral'] = 1\n","Airline['airline_sentiment'][Airline['airline_sentiment'] == 'positive'] = 2\n","Airline['airline_sentiment'][Airline['airline_sentiment'] == 'negative'] = 0"],"execution_count":3,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"HNL4VIUz6DHr","executionInfo":{"status":"ok","timestamp":1607564170790,"user_tz":480,"elapsed":577,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"b5e00648-69ee-4481-f11e-954e25799dbd"},"source":["Airline = Airline[['airline_sentiment','text']]\n","Airline.rename(columns={'airline_sentiment':'labels','text':'context'},inplace=True)\n","Airline.head(5)"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>labels</th>\n","      <th>context</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>14332</th>\n","      <td>0</td>\n","      <td>@AmericanAir this might look good but the pita...</td>\n","    </tr>\n","    <tr>\n","      <th>9969</th>\n","      <td>0</td>\n","      <td>@USAirways -- I've been on hold 40 mins to Can...</td>\n","    </tr>\n","    <tr>\n","      <th>10710</th>\n","      <td>0</td>\n","      <td>@USAirways new slogan should be \"if you don't ...</td>\n","    </tr>\n","    <tr>\n","      <th>13996</th>\n","      <td>0</td>\n","      <td>@AmericanAir what happened?? We didn't get a n...</td>\n","    </tr>\n","    <tr>\n","      <th>5851</th>\n","      <td>0</td>\n","      <td>@SouthwestAir my Flt was delayed, scheduled to...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      labels                                            context\n","14332      0  @AmericanAir this might look good but the pita...\n","9969       0  @USAirways -- I've been on hold 40 mins to Can...\n","10710      0  @USAirways new slogan should be \"if you don't ...\n","13996      0  @AmericanAir what happened?? We didn't get a n...\n","5851       0  @SouthwestAir my Flt was delayed, scheduled to..."]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"pwlL0xe1STGv"},"source":["Apple"]},{"cell_type":"code","metadata":{"id":"16bpKDmuRFMD"},"source":["Apple = pd.read_csv('Apple-Twitter-Sentiment-DFE.csv', error_bad_lines=True, encoding= 'Latin-1')\n","Apple.head(5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2a1SUMulRbhO"},"source":["Apple = Apple[Apple['sentiment'] != 'not_relevant']\n","Apple['sentiment'][Apple['sentiment'] == '1'] = 0\n","Apple['sentiment'][Apple['sentiment'] == '3'] = 1\n","Apple['sentiment'][Apple['sentiment'] == '5'] = 2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HKk6MOiqaxy-","executionInfo":{"status":"ok","timestamp":1607482423295,"user_tz":480,"elapsed":294,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["data = Apple.copy()"],"execution_count":342,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4OAbIDUDR8CY","executionInfo":{"status":"ok","timestamp":1607474539372,"user_tz":480,"elapsed":501,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"4dacaefa-3d3e-4fab-87ce-9995a8c71d7f"},"source":["Apple = Apple[['sentiment','text']]\n","Apple.rename(columns = {'sentiment':'labels','text':'context'},inplace=True)\n","Apple['labels'].value_counts()"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    2162\n","0    1219\n","2     423\n","Name: labels, dtype: int64"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"IYK-jc1ySNrX"},"source":["senti2017"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qJbOZKY4xaMv","executionInfo":{"status":"ok","timestamp":1607474565479,"user_tz":480,"elapsed":509,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"4b083ad9-308c-400f-a09f-8d0409d988bd"},"source":["with open('SemEval2017-task4-dev.subtask-A.english.INPUT.txt', \"r\") as file1:\n","    FileContent = file1.read()\n","    print(FileContent)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["IOPub data rate exceeded.\n","The notebook server will temporarily stop sending output\n","to the client in order to avoid crashing it.\n","To change this limit, set the config variable\n","`--NotebookApp.iopub_data_rate_limit`.\n","\n","Current values:\n","NotebookApp.iopub_data_rate_limit=1000000.0 (bytes/sec)\n","NotebookApp.rate_limit_window=3.0 (secs)\n","\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"RfZ1671uxgW1","executionInfo":{"status":"ok","timestamp":1607474567786,"user_tz":480,"elapsed":967,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"2304b4c9-f8ac-48a1-9e45-ebce134900ab"},"source":["df = pd.read_csv('SemEval2017-task4-dev.subtask-A.english.INPUT.txt',sep='\\t',header=None)\n","df.rename(columns = {1: \"labels\", 2:\"context\"},inplace = True)\n","df.head(5)"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>labels</th>\n","      <th>context</th>\n","      <th>3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>619950566786113536</td>\n","      <td>neutral</td>\n","      <td>Picturehouse's, Pink Floyd's, 'Roger Waters: T...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>619969366986235905</td>\n","      <td>neutral</td>\n","      <td>Order Go Set a Watchman in store or through ou...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>619971047195045888</td>\n","      <td>negative</td>\n","      <td>If these runway renovations at the airport pre...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>619974445185302528</td>\n","      <td>neutral</td>\n","      <td>If you could ask an onstage interview question...</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>619987808317407232</td>\n","      <td>positive</td>\n","      <td>A portion of book sales from our Harper Lee/Go...</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                    0  ...    3\n","0  619950566786113536  ...  NaN\n","1  619969366986235905  ...  NaN\n","2  619971047195045888  ...  NaN\n","3  619974445185302528  ...  NaN\n","4  619987808317407232  ...  NaN\n","\n","[5 rows x 4 columns]"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"P4w1OdCdxqKc","executionInfo":{"status":"ok","timestamp":1607474572803,"user_tz":480,"elapsed":755,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["data =df.copy()"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"ecGo7HEkY16J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607474575015,"user_tz":480,"elapsed":538,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"846d3314-d154-4165-ad75-816b39c4d243"},"source":["data['labels'][data['labels'] == 'neutral'] = 1\n","data['labels'][data['labels'] == 'positive'] = 2\n","data['labels'][data['labels'] == 'negative'] = 0"],"execution_count":36,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ahT2mgjv5N8o","executionInfo":{"status":"ok","timestamp":1607474593724,"user_tz":480,"elapsed":443,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"ab3224b7-6ef1-462b-cfbf-7fdaff35516c"},"source":["SemEval = data.copy()\n","SemEval = SemEval[['labels','context']]\n","SemEval['labels'].value_counts()"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    10342\n","2     7059\n","0     3231\n","Name: labels, dtype: int64"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"YXbSszZ46PiL"},"source":["Final dataset"]},{"cell_type":"code","metadata":{"id":"uU_CJv1i6RUP","colab":{"base_uri":"https://localhost:8080/","height":181},"executionInfo":{"status":"error","timestamp":1607560671669,"user_tz":480,"elapsed":494,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"dab63d55-33bf-49e4-b1da-e7f829475013"},"source":["df = pd.concat([Apple,Airline,SemEval])\n","df.dropna(axis=0,how='any',inplace=True)"],"execution_count":10,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-f67baae0778a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mApple\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mAirline\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mSemEval\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'any'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Apple' is not defined"]}]},{"cell_type":"code","metadata":{"id":"sThVyLCs6442","executionInfo":{"status":"ok","timestamp":1607476955635,"user_tz":480,"elapsed":335,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["data = df.copy()"],"execution_count":116,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r-UI_Pz29G5p","executionInfo":{"status":"ok","timestamp":1607476956840,"user_tz":480,"elapsed":551,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"550e649d-275d-4fca-c4bd-8f6f8ef1ffb1"},"source":["data['labels'].value_counts()"],"execution_count":117,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    15603\n","0    13628\n","2     9845\n","Name: labels, dtype: int64"]},"metadata":{"tags":[]},"execution_count":117}]},{"cell_type":"code","metadata":{"id":"BJIQ5NY3Qoey","executionInfo":{"status":"ok","timestamp":1607564183887,"user_tz":480,"elapsed":764,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["data = Airline"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"OulzJYUqO9TI","executionInfo":{"status":"ok","timestamp":1607564185338,"user_tz":480,"elapsed":518,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["from sklearn.model_selection import train_test_split\n","\n","X = data.context.values\n","y = data.labels.values\n","y = y.astype(float)\n","\n","X_train, X_val, y_train, y_val =\\\n","    train_test_split(X, y, test_size=0.1, random_state=2020)"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"zHw-uKCPAJkd","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":75},"executionInfo":{"status":"ok","timestamp":1607378572636,"user_tz":300,"elapsed":140304,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"7335bc2d-2fcb-48e2-dd13-978f73ef12db"},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-effba015-d889-4a09-bac7-196765ec903a\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-effba015-d889-4a09-bac7-196765ec903a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving Total_12-2-20.csv to Total_12-2-20.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_JWXnfBlwyWC"},"source":["test_data = pd.read_csv('Total_12-2-20.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nmhkvfTmAnxl","colab":{"base_uri":"https://localhost:8080/","height":477},"executionInfo":{"status":"ok","timestamp":1607378575514,"user_tz":300,"elapsed":630,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"e47566c5-8d5f-475a-ce25-384aa610054c"},"source":["test_data.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>status_id</th>\n","      <th>time_retrieved</th>\n","      <th>text</th>\n","      <th>created_at</th>\n","      <th>favorite_count</th>\n","      <th>retweet_count</th>\n","      <th>place</th>\n","      <th>coordinates</th>\n","      <th>user_id</th>\n","      <th>screen_name</th>\n","      <th>user_description</th>\n","      <th>user_follower_count</th>\n","      <th>verified</th>\n","      <th>user_location</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>Country</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1327298633683791872</td>\n","      <td>2020-11-16  21:14</td>\n","      <td>Facts: \\r\\n\\r\\nChernobyl doesn't prove that nu...</td>\n","      <td>2020-11-13 17:13:48</td>\n","      <td>348.0</td>\n","      <td>74.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.116028e+07</td>\n","      <td>prageru</td>\n","      <td>Free Videos. Free Minds.</td>\n","      <td>563593.0</td>\n","      <td>True</td>\n","      <td>los angeles</td>\n","      <td>los angeles</td>\n","      <td>ca</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1328517972026159104</td>\n","      <td>2020-11-16  21:14</td>\n","      <td>Microreactors are the smallest class of nuclea...</td>\n","      <td>2020-11-17 01:59:01</td>\n","      <td>20.0</td>\n","      <td>6.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1328409437757968385</td>\n","      <td>2020-11-16  21:14</td>\n","      <td>Nice resource on global nuclear energy statist...</td>\n","      <td>2020-11-16 18:47:45</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1328407132925026311</td>\n","      <td>2020-11-16  21:14</td>\n","      <td>Excited to see @ENERGY and @NASA's strong part...</td>\n","      <td>2020-11-16 18:38:35</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1328367476908896260</td>\n","      <td>2020-11-16  21:14</td>\n","      <td>VIRTUAL EVENT: @ENERGY and industry experts di...</td>\n","      <td>2020-11-16 16:01:01</td>\n","      <td>11.0</td>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             status_id     time_retrieved  ... State Country\n","0  1327298633683791872  2020-11-16  21:14  ...    ca     USA\n","1  1328517972026159104  2020-11-16  21:14  ...    md     USA\n","2  1328409437757968385  2020-11-16  21:14  ...    md     USA\n","3  1328407132925026311  2020-11-16  21:14  ...    md     USA\n","4  1328367476908896260  2020-11-16  21:14  ...    md     USA\n","\n","[5 rows x 17 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"K7hxtI4l0SUJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607564192137,"user_tz":480,"elapsed":2581,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"3dfe28ee-26b1-4074-f8c2-cb4b90d5ec53"},"source":["import torch\n","\n","if torch.cuda.is_available():       \n","    device = torch.device(\"cuda\")\n","    print(f'There are {torch.cuda.device_count()} GPU(s) available.')\n","    print('Device name:', torch.cuda.get_device_name(0))\n","\n","else:\n","    print('No GPU available, using the CPU instead.')\n","    device = torch.device(\"cpu\")"],"execution_count":11,"outputs":[{"output_type":"stream","text":["There are 1 GPU(s) available.\n","Device name: Tesla V100-SXM2-16GB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uFiv8WGl4p40","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607564201612,"user_tz":480,"elapsed":10316,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"f81e0f21-bc28-4be6-bad9-dbafe29f702e"},"source":["!pip install transformers==2.8.0"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Collecting transformers==2.8.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a3/78/92cedda05552398352ed9784908b834ee32a0bd071a9b32de287327370b7/transformers-2.8.0-py3-none-any.whl (563kB)\n","\r\u001b[K     |▋                               | 10kB 21.6MB/s eta 0:00:01\r\u001b[K     |█▏                              | 20kB 28.0MB/s eta 0:00:01\r\u001b[K     |█▊                              | 30kB 33.1MB/s eta 0:00:01\r\u001b[K     |██▎                             | 40kB 21.7MB/s eta 0:00:01\r\u001b[K     |███                             | 51kB 17.2MB/s eta 0:00:01\r\u001b[K     |███▌                            | 61kB 15.8MB/s eta 0:00:01\r\u001b[K     |████                            | 71kB 13.0MB/s eta 0:00:01\r\u001b[K     |████▋                           | 81kB 13.6MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 92kB 13.4MB/s eta 0:00:01\r\u001b[K     |█████▉                          | 102kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████▍                         | 112kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████                         | 122kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████▋                        | 133kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████▏                       | 143kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████▊                       | 153kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████▎                      | 163kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 174kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████▌                     | 184kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████                     | 194kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████▋                    | 204kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 215kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 225kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████▍                  | 235kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 245kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████▌                 | 256kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 266kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 276kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████▎               | 286kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████▉               | 296kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████████▍              | 307kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 317kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████▋             | 327kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████████▏            | 337kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 348kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 358kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████           | 368kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████▌          | 378kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████          | 389kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████▊         | 399kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████▎        | 409kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████▉        | 419kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████▍       | 430kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████       | 440kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 450kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▏     | 460kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▊     | 471kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 481kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 491kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 501kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████   | 512kB 13.3MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 522kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▎ | 532kB 13.3MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 542kB 13.3MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▍| 552kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 563kB 13.3MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 573kB 13.3MB/s \n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from transformers==2.8.0) (2.23.0)\n","Collecting tokenizers==0.5.2\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d1/3f/73c881ea4723e43c1e9acf317cf407fab3a278daab3a69c98dcac511c04f/tokenizers-0.5.2-cp36-cp36m-manylinux1_x86_64.whl (3.7MB)\n","\u001b[K     |████████████████████████████████| 3.7MB 13.5MB/s \n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.6/dist-packages (from transformers==2.8.0) (3.0.12)\n","Collecting sacremoses\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7d/34/09d19aff26edcc8eb2a01bed8e98f13a1537005d31e95233fd48216eed10/sacremoses-0.0.43.tar.gz (883kB)\n","\u001b[K     |████████████████████████████████| 890kB 57.9MB/s \n","\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.6/dist-packages (from transformers==2.8.0) (2019.12.20)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.6/dist-packages (from transformers==2.8.0) (4.41.1)\n","Collecting boto3\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/00/65/a573dd1cc6ca76815f358f9e5be449221f4017a87b2e6b5ea970df28f94b/boto3-1.16.33-py2.py3-none-any.whl (129kB)\n","\u001b[K     |████████████████████████████████| 133kB 55.0MB/s \n","\u001b[?25hCollecting sentencepiece\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e5/2d/6d4ca4bef9a67070fa1cac508606328329152b1df10bdf31fb6e4e727894/sentencepiece-0.1.94-cp36-cp36m-manylinux2014_x86_64.whl (1.1MB)\n","\u001b[K     |████████████████████████████████| 1.1MB 52.1MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from transformers==2.8.0) (1.18.5)\n","Requirement already satisfied: dataclasses; python_version < \"3.7\" in /usr/local/lib/python3.6/dist-packages (from transformers==2.8.0) (0.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->transformers==2.8.0) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->transformers==2.8.0) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->transformers==2.8.0) (2020.11.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->transformers==2.8.0) (1.24.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers==2.8.0) (1.15.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers==2.8.0) (7.1.2)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers==2.8.0) (0.17.0)\n","Collecting jmespath<1.0.0,>=0.7.1\n","  Downloading https://files.pythonhosted.org/packages/07/cb/5f001272b6faeb23c1c9e0acc04d48eaaf5c862c17709d20e3469c6e0139/jmespath-0.10.0-py2.py3-none-any.whl\n","Collecting botocore<1.20.0,>=1.19.33\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/76/3e/5f64c7b492312069520d219ed56ce6b3d1821dab8251c18d25728578b58e/botocore-1.19.33-py2.py3-none-any.whl (7.0MB)\n","\u001b[K     |████████████████████████████████| 7.0MB 60.4MB/s \n","\u001b[?25hCollecting s3transfer<0.4.0,>=0.3.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/69/79/e6afb3d8b0b4e96cefbdc690f741d7dd24547ff1f94240c997a26fa908d3/s3transfer-0.3.3-py2.py3-none-any.whl (69kB)\n","\u001b[K     |████████████████████████████████| 71kB 10.1MB/s \n","\u001b[?25hRequirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.6/dist-packages (from botocore<1.20.0,>=1.19.33->boto3->transformers==2.8.0) (2.8.1)\n","Building wheels for collected packages: sacremoses\n","  Building wheel for sacremoses (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sacremoses: filename=sacremoses-0.0.43-cp36-none-any.whl size=893257 sha256=2c547c08b411a80da95d9dc4fc554904de82d7033453108a5b432fb3001b1864\n","  Stored in directory: /root/.cache/pip/wheels/29/3c/fd/7ce5c3f0666dab31a50123635e6fb5e19ceb42ce38d4e58f45\n","Successfully built sacremoses\n","\u001b[31mERROR: botocore 1.19.33 has requirement urllib3<1.27,>=1.25.4; python_version != \"3.4\", but you'll have urllib3 1.24.3 which is incompatible.\u001b[0m\n","Installing collected packages: tokenizers, sacremoses, jmespath, botocore, s3transfer, boto3, sentencepiece, transformers\n","Successfully installed boto3-1.16.33 botocore-1.19.33 jmespath-0.10.0 s3transfer-0.3.3 sacremoses-0.0.43 sentencepiece-0.1.94 tokenizers-0.5.2 transformers-2.8.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1GfN8hg19OqU","executionInfo":{"status":"ok","timestamp":1607564203260,"user_tz":480,"elapsed":9850,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["from transformers import ElectraConfig, ElectraTokenizer, ElectraModel, RobertaModel, BartModel\n","import torch"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"4L_Rc7l4bgzJ","executionInfo":{"status":"ok","timestamp":1607564203261,"user_tz":480,"elapsed":9275,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["def text_preprocessing(text):\n","    text = re.sub(r'(@.*?)[\\s]', ' ', text)\n","    text = re.sub(r'&amp;', '&', text)\n","    text = re.sub(r\"@[A-Za-z0-9]+\", ' ', text)\n","    text = re.sub(r\"https?://[A-Za-z0-9./]+\", ' ', text)\n","    text = re.sub(r\"[^a-zA-z.!?'0-9]\", ' ', text)\n","    text = re.sub('\\t', ' ',  text)\n","    text = re.sub(r\" +\", ' ', text)\n","    return text"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"qyYmHR8McE0r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607560694670,"user_tz":480,"elapsed":5277,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"8c42d80c-1bc0-486e-f4ec-0c503716da9c"},"source":["print('Original: ', X[0])\n","print('Processed: ', text_preprocessing(X[0]))"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Original:  @USAirways horrible experience to key west lost luggage called to check &amp; was told not to call back reconsidering my flight back\n","Processed:   horrible experience to key west lost luggage called to check was told not to call back reconsidering my flight back\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yDAfbCle59tP","colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["33aa1abf123541158de12632ac6f3cab","57a4fd2ab9e04d2d82d9fde9943ebe8c","2e8f3e58b7224d01b65b98c621d72144","013b3fde6d9a47ddbe76c8c773b3db03","52a2ca9193d24052852ef24c19cb7d23","a67da284b353409d871eceb0ba9e4881","561664df800742c4b8eaa184bdeebe66","d5efa4c29da2408eaa077e9c3089c77a"]},"executionInfo":{"status":"ok","timestamp":1607564204457,"user_tz":480,"elapsed":8424,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"1b207680-9fd7-4a9f-f1f1-febc09cdb395"},"source":["from transformers import ElectraTokenizer\n","from transformers import RobertaTokenizer\n","from transformers import XLNetTokenizer\n","from transformers import BertTokenizer\n","#tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n","tokenizer = ElectraTokenizer.from_pretrained('google/electra-small-discriminator') \n","#tokenizer = ElectraTokenizer.from_pretrained(''xlnet-base')\n","\n","\n","\n","\n","def preprocessing_for_bert(data):\n","    input_ids = []\n","    attention_masks = []\n","\n","    for sent in data:\n","\n","        encoded_sent = tokenizer.encode_plus(\n","            text=text_preprocessing(sent),  \n","            add_special_tokens=True,        \n","            max_length=MAX_LEN,                  \n","            pad_to_max_length=True,         \n","            #return_tensors='pt',           \n","            return_attention_mask=True      \n","            )\n","        \n","        input_ids.append(encoded_sent.get('input_ids'))\n","        attention_masks.append(encoded_sent.get('attention_mask'))\n","    input_ids = torch.tensor(input_ids)\n","    attention_masks = torch.tensor(attention_masks)\n","\n","    return input_ids, attention_masks"],"execution_count":15,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"33aa1abf123541158de12632ac6f3cab","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, description='Downloading', max=231508.0, style=ProgressStyle(descripti…"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hrbvKGNAlMtt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607564206046,"user_tz":480,"elapsed":2861,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"b586c58c-a5e5-4300-b4ca-66e45e4a71d9"},"source":["all_tweets = data.context.values\n","encoded_tweets = [tokenizer.encode(sent, add_special_tokens=True) for sent in all_tweets]\n","max_len = max([len(sent) for sent in encoded_tweets])\n","print('Max length: ', max_len)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Max length:  62\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QTlQzTzAfCy7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607564207465,"user_tz":480,"elapsed":2276,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"d15d7ad0-6861-4a88-cc6c-cb812bc42b1f"},"source":["import torch\n","MAX_LEN =67\n","token_ids = list(preprocessing_for_bert([X[0]])[0].squeeze().numpy())\n","print('Original: ', X[0])\n","print('Token IDs: ', token_ids)\n","print('Tokenizing data...')\n","train_inputs, train_masks = preprocessing_for_bert(X_train)\n","val_inputs, val_masks = preprocessing_for_bert(X_val)"],"execution_count":17,"outputs":[{"output_type":"stream","text":["Original:  @AmericanAir this might look good but the pita is inedible. Last year delicious shrimp cocktail. This year garbage http://t.co/Sotl8XQsrp\n","Token IDs:  [101, 2023, 2453, 2298, 2204, 2021, 1996, 6770, 2050, 2003, 1999, 2098, 7028, 1012, 2197, 2095, 12090, 20130, 18901, 1012, 2023, 2095, 13044, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","Tokenizing data...\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xHuYEc61gcGL","executionInfo":{"status":"ok","timestamp":1607564507126,"user_tz":480,"elapsed":555,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler\n","train_labels = torch.tensor(y_train)\n","val_labels = torch.tensor(y_val)\n","batch_size = 8\n","train_data = TensorDataset(train_inputs, train_masks, train_labels)\n","train_sampler = RandomSampler(train_data)\n","train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)\n","val_data = TensorDataset(val_inputs, val_masks, val_labels)\n","val_sampler = SequentialSampler(val_data)\n","val_dataloader = DataLoader(val_data, sampler=val_sampler, batch_size=batch_size)"],"execution_count":48,"outputs":[]},{"cell_type":"code","metadata":{"id":"YK41aBFSj5jK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607564216623,"user_tz":480,"elapsed":504,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"5be4229d-22fe-4c17-aea3-baf38177d439"},"source":["%%time\n","import torch\n","import torch.nn as nn\n","#from transformers import BartModel\n","#BartModel.from_pretrained('facebook/bart-large')\n","#ElectraModel.from_pretrained('google/electra-large-discriminator')\n","class BertClassifier(nn.Module):\n","    \"\"\"Bert Model for Classification Tasks.\n","    \"\"\"\n","    def __init__(self, freeze_bert=False):\n","\n","        super(BertClassifier, self).__init__()\n","        D_in, H, D_out = 256, 64, 3\n","        self.bert = ElectraModel.from_pretrained('google/electra-small-discriminator')\n","        self.classifier = nn.Sequential(\n","            nn.Linear(D_in, H),\n","            nn.ReLU(),\n","            #nn.Dropout(0.1),\n","            nn.Linear(H, D_out)\n","        )\n","        #if freeze_bert:\n","            #for param in self.bert.parameters():\n","                #param.requires_grad = False\n","        \n","    def forward(self, input_ids, attention_mask):\n","        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)\n","        last_hidden_state_cls = outputs[0][:, 0, :]\n","        logits = self.classifier(last_hidden_state_cls)\n","        return logits"],"execution_count":19,"outputs":[{"output_type":"stream","text":["CPU times: user 40 µs, sys: 0 ns, total: 40 µs\n","Wall time: 42.2 µs\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3PqDB2n48qxB"},"source":["model = ElectraModel.from_pretrained('google/electra-large-discriminator')\n","model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JX7su7Q_269U","executionInfo":{"status":"ok","timestamp":1607564223504,"user_tz":480,"elapsed":856,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["from transformers import AdamW, get_linear_schedule_with_warmup\n","\n","def initialize_model(epochs=4):\n","    bert_classifier = BertClassifier(freeze_bert=False)\n","    bert_classifier.to(device)\n","    optimizer = AdamW(bert_classifier.parameters(),\n","                      lr=1e-5,    \n","                      eps=1e-6    \n","                      )\n","    total_steps = len(train_dataloader) * epochs\n","    scheduler = get_linear_schedule_with_warmup(optimizer,\n","                                                num_warmup_steps=1000, \n","                                                num_training_steps=total_steps)\n","    return bert_classifier, optimizer, scheduler"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xy4HkhyECibW","executionInfo":{"status":"ok","timestamp":1607564225189,"user_tz":480,"elapsed":634,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["import random\n","import time\n","loss_fn = nn.CrossEntropyLoss()\n","def set_seed(seed_value=42):\n","    \"\"\"Set seed for reproducibility.\n","    \"\"\"\n","    random.seed(seed_value)\n","    np.random.seed(seed_value)\n","    torch.manual_seed(seed_value)\n","    torch.cuda.manual_seed_all(seed_value)\n","\n","def train(model, train_dataloader, val_dataloader=None, epochs=4, evaluation=False):\n","\n","    for epoch_i in range(epochs):\n","        print(f\"{'Epoch':^7} | {'Batch':^7} | {'Train Loss':^12} | {'Val Loss':^10} | {'Val Acc':^9} | {'Elapsed':^9}\")\n","        print(\"-\"*70)\n","        t0_epoch, t0_batch = time.time(), time.time()\n","        total_loss, batch_loss, batch_counts = 0, 0, 0\n","        model.train()\n","        for step, batch in enumerate(train_dataloader):\n","            batch_counts +=1\n","            b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)\n","            model.zero_grad()\n","            logits = model(b_input_ids, b_attn_mask)\n","            loss = loss_fn(logits, b_labels.long())\n","            batch_loss += loss.item()\n","            total_loss += loss.item()\n","            loss.backward()\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n","            optimizer.step()\n","            scheduler.step()\n","            if (step % 20 == 0 and step != 0) or (step == len(train_dataloader) - 1):\n","                time_elapsed = time.time() - t0_batch\n","                print(f\"{epoch_i + 1:^7} | {step:^7} | {batch_loss / batch_counts:^12.6f} | {'-':^10} | {'-':^9} | {time_elapsed:^9.2f}\")\n","                batch_loss, batch_counts = 0, 0\n","                t0_batch = time.time()\n","        avg_train_loss = total_loss / len(train_dataloader) * 6\n","        print(\"-\"*70)\n","        # =======================================\n","        #               Evaluation\n","        # =======================================\n","        if (evaluation == True):\n","          val_loss, val_accuracy = evaluate(model, val_dataloader)\n","          time_elapsed = time.time() - t0_epoch           \n","          print(f\"{epoch_i + 1:^7} | {'-':^7} | {avg_train_loss:^12.6f} | {val_loss:^10.6f} | {val_accuracy:^9.2f} | {time_elapsed:^9.2f}\")\n","          print(\"-\"*70)\n","        print(\"\\n\")\n","    \n","    print(\"Training complete!\")\n","\n","\n","def evaluate(model, val_dataloader):\n","    model.eval()\n","    val_accuracy = []\n","    val_loss = []\n","    for batch in val_dataloader:\n","        b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)\n","        with torch.no_grad():\n","            logits = model(b_input_ids, b_attn_mask)\n","        loss = loss_fn(logits, b_labels.long())\n","        val_loss.append(loss.item())\n","        preds = torch.argmax(logits, dim=1).flatten()\n","        accuracy = (preds == b_labels).cpu().numpy().mean() * 100\n","        val_accuracy.append(accuracy)\n","    val_loss = np.mean(val_loss)\n","    val_accuracy = np.mean(val_accuracy)\n","    return val_loss, val_accuracy"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"wfYw7dJ0U0v6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607565300811,"user_tz":480,"elapsed":35848,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"b744402e-f8dc-49bd-a199-179577e0cb69"},"source":["set_seed(10)\n","bert_classifier, optimizer, scheduler = initialize_model(epochs=1)\n","train(bert_classifier, train_dataloader, val_dataloader, epochs=1, evaluation=True)"],"execution_count":68,"outputs":[{"output_type":"stream","text":[" Epoch  |  Batch  |  Train Loss  |  Val Loss  |  Val Acc  |  Elapsed \n","----------------------------------------------------------------------\n","   1    |   20    |   1.256261   |     -      |     -     |   1.73   \n","   1    |   40    |   1.276504   |     -      |     -     |   1.47   \n","   1    |   60    |   1.246965   |     -      |     -     |   1.53   \n","   1    |   80    |   1.242297   |     -      |     -     |   1.52   \n","   1    |   100   |   1.208377   |     -      |     -     |   1.58   \n","   1    |   120   |   1.197273   |     -      |     -     |   1.58   \n","   1    |   140   |   1.153329   |     -      |     -     |   1.52   \n","   1    |   160   |   1.121194   |     -      |     -     |   1.47   \n","   1    |   180   |   1.104530   |     -      |     -     |   1.53   \n","   1    |   200   |   1.086377   |     -      |     -     |   1.44   \n","   1    |   220   |   1.046726   |     -      |     -     |   1.44   \n","   1    |   240   |   0.997005   |     -      |     -     |   1.48   \n","   1    |   260   |   1.003871   |     -      |     -     |   1.49   \n","   1    |   280   |   0.993364   |     -      |     -     |   1.53   \n","   1    |   300   |   0.964142   |     -      |     -     |   1.47   \n","   1    |   320   |   0.959461   |     -      |     -     |   1.45   \n","   1    |   340   |   0.909811   |     -      |     -     |   1.48   \n","   1    |   360   |   0.909035   |     -      |     -     |   1.56   \n","   1    |   380   |   0.897518   |     -      |     -     |   1.47   \n","   1    |   400   |   0.935453   |     -      |     -     |   1.58   \n","   1    |   420   |   0.900891   |     -      |     -     |   1.47   \n","   1    |   440   |   0.887992   |     -      |     -     |   1.44   \n","   1    |   444   |   0.874230   |     -      |     -     |   0.29   \n","----------------------------------------------------------------------\n","   1    |    -    |   6.346796   |  0.850163  |   64.00   |   34.12  \n","----------------------------------------------------------------------\n","\n","\n","Training complete!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZI6PpsD1VBgO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607560894892,"user_tz":480,"elapsed":39637,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"ef2d59c6-a45c-4bc6-989e-70587eb21a21"},"source":["train(bert_classifier, train_dataloader, val_dataloader, epochs=1, evaluation=True)"],"execution_count":27,"outputs":[{"output_type":"stream","text":[" Epoch  |  Batch  |  Train Loss  |  Val Loss  |  Val Acc  |  Elapsed \n","----------------------------------------------------------------------\n","   1    |   20    |   0.978141   |     -      |     -     |   6.54   \n","   1    |   40    |   0.933041   |     -      |     -     |   6.17   \n","   1    |   60    |   0.946484   |     -      |     -     |   6.19   \n","   1    |   80    |   0.862507   |     -      |     -     |   6.18   \n","   1    |   100   |   0.744571   |     -      |     -     |   6.17   \n","   1    |   120   |   0.676393   |     -      |     -     |   6.17   \n","   1    |   122   |   0.634669   |     -      |     -     |   0.55   \n","----------------------------------------------------------------------\n","   1    |    -    |   5.125377   |  0.605982  |   71.95   |   39.14  \n","----------------------------------------------------------------------\n","\n","\n","Training complete!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"V5_w4erqGzpe","executionInfo":{"status":"ok","timestamp":1607564292903,"user_tz":480,"elapsed":796,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["import torch.nn.functional as F\n","\n","def bert_predict(model, test_dataloader):\n","    model.eval()\n","    all_logits = []\n","    for batch in test_dataloader:\n","        b_input_ids, b_attn_mask = tuple(t.to(device) for t in batch)[:2]\n","        with torch.no_grad():\n","            logits = model(b_input_ids, b_attn_mask)\n","        all_logits.append(logits)\n","    all_logits = torch.cat(all_logits, dim=0)\n","    probs = F.softmax(all_logits, dim=1).cpu().numpy()\n","    return probs"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"kcmj5s0eRMUh","executionInfo":{"status":"ok","timestamp":1607465548573,"user_tz":480,"elapsed":2026,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["probs = bert_predict(bert_classifier, val_dataloader)"],"execution_count":58,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dzi2OQ6cyvPJ","executionInfo":{"status":"ok","timestamp":1607465550738,"user_tz":480,"elapsed":767,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"d7462e16-d0f0-4e15-fc2e-a8e9cf01b6f4"},"source":["preds = np.argmax(probs, axis=1).flatten()\n","from sklearn.metrics import f1_score,accuracy_score\n","print(accuracy_score(preds,y_val))\n","print(f1_score(preds,y_val,average='micro'))\n","print(f1_score(preds,y_val,average='macro'))\n","print(f1_score(preds,y_val,average='weighted'))"],"execution_count":59,"outputs":[{"output_type":"stream","text":["0.8095909732016925\n","0.8095909732016925\n","0.8072463260382142\n","0.8105251500445764\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lz3b_9UDOtDd","executionInfo":{"status":"ok","timestamp":1607244735020,"user_tz":300,"elapsed":571,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"82a1b8be-d237-4a85-9210-e3951ff99266"},"source":["from sklearn.metrics import confusion_matrix\n","confusion_matrix(val_labels.tolist(), preds, labels= [1,0,2])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1179,  194,  229],\n","       [ 167, 1131,   23],\n","       [ 182,   26,  777]])"]},"metadata":{"tags":[]},"execution_count":130}]},{"cell_type":"code","metadata":{"id":"IAKbs9tBO283","executionInfo":{"status":"ok","timestamp":1607475555196,"user_tz":480,"elapsed":599,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["import numpy as np\n","\n","\n","def plot_confusion_matrix(cm,\n","                          target_names,\n","                          title='Confusion matrix',\n","                          cmap=None,\n","                          normalize=True):\n","    \"\"\"\n","    given a sklearn confusion matrix (cm), make a nice plot\n","\n","    Arguments\n","    ---------\n","    cm:           confusion matrix from sklearn.metrics.confusion_matrix\n","\n","    target_names: given classification classes such as [0, 1, 2]\n","                  the class names, for example: ['high', 'medium', 'low']\n","\n","    title:        the text to display at the top of the matrix\n","\n","    cmap:         the gradient of the values displayed from matplotlib.pyplot.cm\n","                  see http://matplotlib.org/examples/color/colormaps_reference.html\n","                  plt.get_cmap('jet') or plt.cm.Blues\n","\n","    normalize:    If False, plot the raw numbers\n","                  If True, plot the proportions\n","\n","    Usage\n","    -----\n","    plot_confusion_matrix(cm           = cm,                  # confusion matrix created by\n","                                                              # sklearn.metrics.confusion_matrix\n","                          normalize    = True,                # show proportions\n","                          target_names = y_labels_vals,       # list of names of the classes\n","                          title        = best_estimator_name) # title of graph\n","\n","    Citiation\n","    ---------\n","    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n","\n","    \"\"\"\n","    import matplotlib.pyplot as plt\n","    import numpy as np\n","    import itertools\n","\n","    accuracy = np.trace(cm) / float(np.sum(cm))\n","    misclass = 1 - accuracy\n","\n","    if cmap is None:\n","        cmap = plt.get_cmap('Blues')\n","\n","    plt.figure(figsize=(8, 6))\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","\n","    if target_names is not None:\n","        tick_marks = np.arange(len(target_names))\n","        plt.xticks(tick_marks, target_names, rotation=45)\n","        plt.yticks(tick_marks, target_names)\n","\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","\n","\n","    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        if normalize:\n","            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","        else:\n","            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","\n","    plt.tight_layout()\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n","    plt.show()"],"execution_count":62,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"uX72iVZHTwMo","executionInfo":{"status":"ok","timestamp":1607246599982,"user_tz":300,"elapsed":1169,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"d02d2cb7-3cc0-4f8e-83d4-c28d97cb44a2"},"source":["plot_confusion_matrix(cm           = np.array([[37,  0, 12],\n","                             [ 6,  11,  5],\n","                             [3,  0, 26]]),\n","                      normalize    = False,\n","                      target_names = ['Neutral', 'Negative', 'Positive'],\n","                      title        = \"Confusion Matrix for Sample Dataset\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"UOskcnfDQfBZ"},"source":["sample_label = torch.tensor(sample['labels'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JkMK5VqJJvSO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607482018264,"user_tz":480,"elapsed":45924,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"5c042ed1-6249-4e64-af53-1ce83e2a7403"},"source":["full_train_data = torch.utils.data.ConcatDataset([train_data, val_data])\n","full_train_sampler = RandomSampler(full_train_data)\n","full_train_dataloader = DataLoader(full_train_data, sampler=full_train_sampler, batch_size=32)\n","bert_classifier, optimizer, scheduler = initialize_model(epochs=2)\n","train(bert_classifier, full_train_dataloader, epochs=1)"],"execution_count":334,"outputs":[{"output_type":"stream","text":[" Epoch  |  Batch  |  Train Loss  |  Val Loss  |  Val Acc  |  Elapsed \n","----------------------------------------------------------------------\n","   1    |   20    |   1.074350   |     -      |     -     |   6.53   \n","   1    |   40    |   1.070863   |     -      |     -     |   6.18   \n","   1    |   60    |   0.999251   |     -      |     -     |   6.17   \n","   1    |   80    |   1.000841   |     -      |     -     |   6.19   \n","   1    |   100   |   0.988751   |     -      |     -     |   6.20   \n","   1    |   120   |   0.995561   |     -      |     -     |   6.18   \n","   1    |   130   |   0.996456   |     -      |     -     |   2.88   \n","----------------------------------------------------------------------\n","\n","\n","Training complete!\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fc3Xe8Vp_wf1"},"source":["train(bert_classifier, full_train_dataloader, epochs=2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"keZJnjUQ2F5X","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":75},"executionInfo":{"status":"ok","timestamp":1607240189071,"user_tz":300,"elapsed":131541,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"7e07e680-196f-4c9d-ab2a-5e343e14886d"},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-665ec7cf-c9ef-41f4-b085-0d6ce69a33fb\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-665ec7cf-c9ef-41f4-b085-0d6ce69a33fb\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving Total_12-2-20.csv to Total_12-2-20.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dqYhin2P3Ga3","executionInfo":{"status":"ok","timestamp":1607560943248,"user_tz":480,"elapsed":767,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["#df = pd.read_csv('Total_11-23-20.csv')\n","df = pd.read_csv('renewables_topic_tweets.csv')"],"execution_count":29,"outputs":[]},{"cell_type":"code","metadata":{"id":"jGlsy8aH--at"},"source":["pd.set_option('display.max_colwidth', -1)\n","sample.tail(5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GIYvodDc_U9R"},"source":["sample_label = [0,1,1,2,1,2,1,2,1,2,\n","         2,0,1,2,2,1,1,1,2,1,\n","        0,1,1,1,1,2,2,2,0,1,\n","         0,2,1,1,0,1,0,0,2,2,\n","         2,2,1,2,2,2,1,1,1,1,\n","         1,1,2,1,1,1,2,2,1,2,\n","         0,1,1,1,0,2,1,1,0,1,\n","         2,2,1,1,1,2,2,2,1,1,\n","         1,1,1,0,1,1,1,2,1,2,\n","         1,2,1,2,2,0,2,0,2,2]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k29UQmLCDo4E"},"source":["sample_labels = torch.tensor(sample['labels'])\n","sample_inputs, sample_masks = preprocessing_for_bert(sample.text)\n","batch_size = 8\n","sample_data = TensorDataset(sample_inputs, sample_masks, sample_labels)\n","sample_sampler =  SequentialSampler(sample_data)\n","sample_dataloader = DataLoader(sample_data, sampler=sample_sampler, batch_size=batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GiT6W3OXRWv0"},"source":["probss = bert_predict(bert_classifier, sample_dataloader)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N9QIpW7vRjaI"},"source":["preds = np.argmax(probss, axis=1).flatten()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-tjv50G1SCUd"},"source":["print(accuracy_score(preds,sample['labels']))\n","print(f1_score(preds,sample['labels'],average='micro'))\n","print(f1_score(preds,sample['labels'],average='macro'))\n","print(f1_score(preds,sample['labels'],average='weighted'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":246},"id":"XMs4LViqDwp7","executionInfo":{"status":"ok","timestamp":1607241686115,"user_tz":300,"elapsed":574,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"b2fce2f9-00b5-469e-a0ce-ff14c0ddf1f0"},"source":["sample.sample(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>text</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>58</th>\n","      <td>58</td>\n","      <td>U.S. nuclear power plants avoided more than 470 million metric tons of carbon emissions in 2019—more than all other clean energy sources combined. https://t.co/9F0BtVm1Kz</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>Facts: \\r\\n\\r\\nChernobyl doesn't prove that nuclear energy is dangerous — it shows the failures of the Communist Soviet Union!\\r\\n\\r\\nThe accident turned into a catastrophe because of pitiful safety procedures.\\r\\n\\r\\nEven so, initial reports of radiation turned out to be grossly exaggerated.</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>Nice resource on global nuclear energy statistics. https://t.co/ADeticP4ia</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>70</td>\n","      <td>Great meeting today with @DeptofDefense on nuclear technology for space applications!  Looking forward to continued collaboration on several exciting fronts! https://t.co/9q4w55fcGw</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>77</td>\n","      <td>🚀Space\\r\\n⚡️Energy\\r\\n💊Medicine\\r\\n🔎Crime\\r\\n🚜Agriculture\\r\\n\\r\\n@GovNuclear explores ✋ ways nuclear helps power our lives. \\r\\n#NuclearSciWeek\\r\\nhttps://t.co/o23DrKOOZc</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    index  ... labels\n","58  58     ...  1    \n","0   0      ...  0    \n","2   2      ...  1    \n","70  70     ...  2    \n","77  77     ...  2    \n","\n","[5 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":107}]},{"cell_type":"code","metadata":{"id":"qWaV_aZYccik","executionInfo":{"status":"ok","timestamp":1607564278042,"user_tz":480,"elapsed":808,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["test = pd.read_csv('renewables_topic_tweets.csv')"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"id":"56QTDchdOHBL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607564595340,"user_tz":480,"elapsed":1188,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"af35a3ab-38de-4d3d-f226-6fbb73da73ba"},"source":["print('Tokenizing data...')\n","test_inputs, test_masks = preprocessing_for_bert(test.text)\n","test_dataset = TensorDataset(test_inputs, test_masks)\n","test_sampler = SequentialSampler(test_dataset)\n","test_dataloader = DataLoader(test_dataset, sampler=test_sampler, batch_size=8)"],"execution_count":55,"outputs":[{"output_type":"stream","text":["Tokenizing data...\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XNMGNKgYGpEr"},"source":["train(bert_classifier, train_dataloader, epochs=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tGx8h7yXRkfI","executionInfo":{"status":"ok","timestamp":1607565342071,"user_tz":480,"elapsed":1833,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["probs = bert_predict(bert_classifier, test_dataloader)\n","preds = np.argmax(probs, axis=1).flatten()"],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"id":"AeSvpL_22xvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607565342071,"user_tz":480,"elapsed":1135,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"7ac49da7-318e-4ec9-89b4-defb7990d74d"},"source":["test['sentiment'] = preds\n","test['sentiment'].value_counts()"],"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2    546\n","1    372\n","Name: sentiment, dtype: int64"]},"metadata":{"tags":[]},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"LEGVh9DFckfJ","executionInfo":{"status":"ok","timestamp":1607483518421,"user_tz":480,"elapsed":790,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["p1 = preds"],"execution_count":380,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tDld7aOga_gv","executionInfo":{"status":"ok","timestamp":1607483524119,"user_tz":480,"elapsed":791,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"64d2b353-34d0-41a4-989a-0e8b56834ec1"},"source":["test['sentiment'].value_counts()"],"execution_count":381,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2    12187\n","0     4255\n","1     2843\n","Name: sentiment, dtype: int64"]},"metadata":{"tags":[]},"execution_count":381}]},{"cell_type":"code","metadata":{"id":"a6RRSPD0W5SM","executionInfo":{"status":"ok","timestamp":1607483574228,"user_tz":480,"elapsed":829,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["test.to_csv('final_p.csv')"],"execution_count":387,"outputs":[]},{"cell_type":"code","metadata":{"id":"KkgrQfBF32eg"},"source":["test.head(5)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RMq8ItUWVZkl","executionInfo":{"status":"ok","timestamp":1607477267442,"user_tz":480,"elapsed":818,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["test.to_csv('final_predication2.csv')"],"execution_count":130,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5oX8nBVdI27E","executionInfo":{"status":"ok","timestamp":1607477746292,"user_tz":480,"elapsed":429,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"8da3c4f6-7a7c-42aa-bbd3-953850e4a262"},"source":["len(test['user_id'].value_counts())"],"execution_count":156,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5477"]},"metadata":{"tags":[]},"execution_count":156}]},{"cell_type":"code","metadata":{"id":"YjeLQW0kTe1-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607380082469,"user_tz":300,"elapsed":59205,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"411bf5c7-087d-4f6d-e301-6ec3d9d8515d"},"source":["len(df.user_id.value_counts())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["11334"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"3F3PTtXWUUBN"},"source":["test['sentiment'][test['sentiment'] == 0] = -1\n","test['sentiment'][test['sentiment'] == 1] = 0\n","test['sentiment'][test['sentiment'] == 2] = 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yQe3I3FWXIgp"},"source":["sample"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ycIDBpXQTsgW","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1607484486895,"user_tz":480,"elapsed":568,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"3bf43de5-a038-4e46-b971-869d1de21562"},"source":["av = pd.DataFrame(test.groupby(['sentiment','user_id']).count())\n","av.head(5)"],"execution_count":392,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>status_id</th>\n","      <th>time_retrieved</th>\n","      <th>text</th>\n","      <th>created_at</th>\n","      <th>favorite_count</th>\n","      <th>retweet_count</th>\n","      <th>place</th>\n","      <th>coordinates</th>\n","      <th>screen_name</th>\n","      <th>user_description</th>\n","      <th>user_follower_count</th>\n","      <th>verified</th>\n","      <th>user_location</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>Country</th>\n","    </tr>\n","    <tr>\n","      <th>sentiment</th>\n","      <th>user_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"5\" valign=\"top\">-1</th>\n","      <th>11351.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>741803.0</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>784519.0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>876641.0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1032541.0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     status_id  time_retrieved  text  ...  City  State  Country\n","sentiment user_id                                     ...                      \n","-1        11351.0            2               2     2  ...     2      2        2\n","          741803.0           2               2     2  ...     2      2        2\n","          784519.0           1               1     1  ...     1      1        1\n","          876641.0           1               1     1  ...     1      1        1\n","          1032541.0          1               1     1  ...     1      1        1\n","\n","[5 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":392}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nfTZuG60gFVX","executionInfo":{"status":"ok","timestamp":1607483812192,"user_tz":480,"elapsed":793,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"8349afad-d285-44a5-9a82-129c0c952370"},"source":["len(score)"],"execution_count":389,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5477"]},"metadata":{"tags":[]},"execution_count":389}]},{"cell_type":"code","metadata":{"id":"TjyeAP6bVjgt","executionInfo":{"status":"ok","timestamp":1607483670451,"user_tz":480,"elapsed":505,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}}},"source":["score.to_csv('User_sentiments.csv')"],"execution_count":388,"outputs":[]},{"cell_type":"code","metadata":{"id":"QdbgAgeuUee7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607483554054,"user_tz":480,"elapsed":756,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"ab2f9d5e-6df2-4999-ad4b-f6db9d40783b"},"source":["len(score[score['sentiment']>0])"],"execution_count":384,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3559"]},"metadata":{"tags":[]},"execution_count":384}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EtOGSotyi5Qg","executionInfo":{"status":"ok","timestamp":1607484558380,"user_tz":480,"elapsed":853,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"9f81b292-3b34-4ce8-dd46-93ad9d3187a5"},"source":["12187/3559"],"execution_count":393,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.4242764821579095"]},"metadata":{"tags":[]},"execution_count":393}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"01OJzgj0jrbJ","executionInfo":{"status":"ok","timestamp":1607484773523,"user_tz":480,"elapsed":807,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"b68dcf34-bd3f-4a1b-e899-5520e09b1386"},"source":["2843/1093"],"execution_count":394,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2.6010978956999087"]},"metadata":{"tags":[]},"execution_count":394}]},{"cell_type":"code","metadata":{"id":"ukGrFh5vU-oC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607483556659,"user_tz":480,"elapsed":756,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"b305ed65-b1ae-4155-cadd-858f94c85a2b"},"source":["len(score[score['sentiment']==0\n","          ])"],"execution_count":385,"outputs":[{"output_type":"execute_result","data":{"text/plain":["825"]},"metadata":{"tags":[]},"execution_count":385}]},{"cell_type":"code","metadata":{"id":"q7KKpr2gU-tP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607483559191,"user_tz":480,"elapsed":507,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"49998cab-1a2c-4608-9c04-fca9e9f90729"},"source":["len(score[score['sentiment']<0])"],"execution_count":386,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1093"]},"metadata":{"tags":[]},"execution_count":386}]},{"cell_type":"code","metadata":{"id":"vvDnB7ZXizva"},"source":["df_p = df[df['sentiment'] == 2]\n","df_n = df[df['sentiment'] == 0]\n","df_nn = df[df['sentiment'] == 1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BygM7HhRio_J"},"source":["positive = pd.DataFrame(df_p['State'].value_counts())\n","negative = pd.DataFrame(df_n['State'].value_counts())\n","neutral = pd.DataFrame(df_nn['State'].value_counts())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hFJt71Mhmm6X"},"source":["neutral.reset_index(inplace = True)\n","neutral"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-EjbsR60jMA2"},"source":["#positive.reset_index(inplace = True)\n","positive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vPr6LhBPj0DH"},"source":["negative.reset_index(inplace = True)\n","negative"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R-ENcbuO6J2Z"},"source":["df['sentiment'][df['sentiment'] == 1] = 'neutral'\n","df['sentiment'][df['sentiment'] == 2] = 'positive'\n","df['sentiment'][df['sentiment'] == 0] = 'negative'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jnoul29j3_I6"},"source":["df.to_csv('predication_result2.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c3W0x0w14-62","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607249457619,"user_tz":300,"elapsed":21406,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"af775340-4c3d-48d0-d608-199372ae37ee"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bBMi-I6xiBV0"},"source":["model_save_name = 'ELECTRA.pt'\n","path = F\"/content/gdrive/MyDrive/{model_save_name}\" \n","torch.save(bert_classifier.state_dict(), path)"],"execution_count":null,"outputs":[]}]}