{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"},"colab":{"name":"“LDA_New.ipynb”","provenance":[{"file_id":"1mtpZ84r0yx4HsPEXKKD-OjTlpXZvqoPH","timestamp":1607227255852}]}},"cells":[{"cell_type":"code","metadata":{"id":"mVc0hkgfI7i6"},"source":["#shared code from:\n","#https://medium.com/analytics-vidhya/topic-modeling-using-gensim-lda-in-python-48eaa2344920\n","#and \n","#https://www.machinelearningplus.com/nlp/topic-modeling-gensim-python/"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"collapsed":true,"colab":{"base_uri":"https://localhost:8080/"},"id":"oo98TSrdI7i7","executionInfo":{"status":"ok","timestamp":1607238148414,"user_tz":300,"elapsed":11350,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"a09fb564-f7ae-437d-db57-8e49e76a1732"},"source":["!pip3 install spacy\n","!pip3 install gensim \n","!pip3 install pyLDAvis\n","!python -m spacy download en_core_web_sm "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: spacy in /usr/local/lib/python3.6/dist-packages (2.2.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from spacy) (50.3.2)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.6/dist-packages (from spacy) (2.23.0)\n","Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.6/dist-packages (from spacy) (7.4.0)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from spacy) (3.0.4)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.6/dist-packages (from spacy) (4.41.1)\n","Requirement already satisfied: srsly<1.1.0,>=1.0.2 in /usr/local/lib/python3.6/dist-packages (from spacy) (1.0.4)\n","Requirement already satisfied: catalogue<1.1.0,>=0.0.7 in /usr/local/lib/python3.6/dist-packages (from spacy) (1.0.0)\n","Requirement already satisfied: plac<1.2.0,>=0.9.6 in /usr/local/lib/python3.6/dist-packages (from spacy) (1.1.3)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.6/dist-packages (from spacy) (1.18.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.6/dist-packages (from spacy) (1.0.4)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from spacy) (2.0.4)\n","Requirement already satisfied: wasabi<1.1.0,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from spacy) (0.8.0)\n","Requirement already satisfied: blis<0.5.0,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from spacy) (0.4.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2020.11.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (1.24.3)\n","Requirement already satisfied: importlib-metadata>=0.20; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from catalogue<1.1.0,>=0.0.7->spacy) (2.0.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata>=0.20; python_version < \"3.8\"->catalogue<1.1.0,>=0.0.7->spacy) (3.4.0)\n","Requirement already satisfied: gensim in /usr/local/lib/python3.6/dist-packages (3.6.0)\n","Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.4.1)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (3.0.0)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.15.0)\n","Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.18.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (2.23.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2020.11.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (3.0.4)\n","Requirement already satisfied: pyLDAvis in /usr/local/lib/python3.6/dist-packages (2.1.2)\n","Requirement already satisfied: scipy>=0.18.0 in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (1.4.1)\n","Requirement already satisfied: wheel>=0.23.0 in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (0.35.1)\n","Requirement already satisfied: numpy>=1.9.2 in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (1.18.5)\n","Requirement already satisfied: pytest in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (3.6.4)\n","Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (0.16.0)\n","Requirement already satisfied: funcy in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (1.15)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (2.7.1)\n","Requirement already satisfied: jinja2>=2.7.2 in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (2.11.2)\n","Requirement already satisfied: pandas>=0.17.0 in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (1.1.4)\n","Requirement already satisfied: joblib>=0.8.4 in /usr/local/lib/python3.6/dist-packages (from pyLDAvis) (0.17.0)\n","Requirement already satisfied: more-itertools>=4.0.0 in /usr/local/lib/python3.6/dist-packages (from pytest->pyLDAvis) (8.6.0)\n","Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.6/dist-packages (from pytest->pyLDAvis) (20.3.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from pytest->pyLDAvis) (50.3.2)\n","Requirement already satisfied: py>=1.5.0 in /usr/local/lib/python3.6/dist-packages (from pytest->pyLDAvis) (1.9.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from pytest->pyLDAvis) (1.15.0)\n","Requirement already satisfied: atomicwrites>=1.0 in /usr/local/lib/python3.6/dist-packages (from pytest->pyLDAvis) (1.4.0)\n","Requirement already satisfied: pluggy<0.8,>=0.5 in /usr/local/lib/python3.6/dist-packages (from pytest->pyLDAvis) (0.7.1)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.6/dist-packages (from jinja2>=2.7.2->pyLDAvis) (1.1.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.17.0->pyLDAvis) (2.8.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.17.0->pyLDAvis) (2018.9)\n","Requirement already satisfied: en_core_web_sm==2.2.5 from https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.5/en_core_web_sm-2.2.5.tar.gz#egg=en_core_web_sm==2.2.5 in /usr/local/lib/python3.6/dist-packages (2.2.5)\n","Requirement already satisfied: spacy>=2.2.2 in /usr/local/lib/python3.6/dist-packages (from en_core_web_sm==2.2.5) (2.2.4)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (2.23.0)\n","Requirement already satisfied: blis<0.5.0,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (0.4.1)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (4.41.1)\n","Requirement already satisfied: srsly<1.1.0,>=1.0.2 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (1.0.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (50.3.2)\n","Requirement already satisfied: wasabi<1.1.0,>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (0.8.0)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (2.0.4)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (3.0.4)\n","Requirement already satisfied: thinc==7.4.0 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (7.4.0)\n","Requirement already satisfied: plac<1.2.0,>=0.9.6 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (1.1.3)\n","Requirement already satisfied: catalogue<1.1.0,>=0.0.7 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (1.0.0)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (1.18.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.6/dist-packages (from spacy>=2.2.2->en_core_web_sm==2.2.5) (1.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_sm==2.2.5) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_sm==2.2.5) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_sm==2.2.5) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=2.2.2->en_core_web_sm==2.2.5) (2020.11.8)\n","Requirement already satisfied: importlib-metadata>=0.20; python_version < \"3.8\" in /usr/local/lib/python3.6/dist-packages (from catalogue<1.1.0,>=0.0.7->spacy>=2.2.2->en_core_web_sm==2.2.5) (2.0.0)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.6/dist-packages (from importlib-metadata>=0.20; python_version < \"3.8\"->catalogue<1.1.0,>=0.0.7->spacy>=2.2.2->en_core_web_sm==2.2.5) (3.4.0)\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the model via spacy.load('en_core_web_sm')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_pb__Rs2I7i8","executionInfo":{"status":"ok","timestamp":1607238148414,"user_tz":300,"elapsed":11340,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"62032cd3-45f4-47ce-f063-a5cd72c7a8ae"},"source":["import nltk\n","nltk.download('stopwords')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"5nuMPMAmI7i8"},"source":["import re\n","import numpy as np\n","import pandas as  pd\n","from pprint import pprint# Gensim\n","import gensim\n","import gensim.corpora as corpora\n","from gensim.utils import simple_preprocess\n","from gensim.models import CoherenceModel# spaCy for preprocessing\n","import spacy# Plotting tools\n","import pyLDAvis\n","import pyLDAvis.gensim\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9fWfK9IiI7i8"},"source":["# NLTK Stop words\n","from nltk.corpus import stopwords\n","stop_words = stopwords.words('english')\n","stop_words.extend([ 's', 'from', 'rt', 'http', 'co', 'amp', 'https', 'nuclear', 'energy', 'power', 'plant'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":75},"id":"0aYzmp50NAJw","executionInfo":{"status":"ok","timestamp":1607238233991,"user_tz":300,"elapsed":85559,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"fc0bf495-f05b-45e2-9262-32860ce67b5b"},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-b4988be1-e517-45e6-912c-f8a9cfda3cd9\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-b4988be1-e517-45e6-912c-f8a9cfda3cd9\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving Total_12-2-20.csv to Total_12-2-20 (1).csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"scrolled":true,"id":"tys0Dx9PI7i8"},"source":["# LoadDataset\n","df = pd.read_csv('Total_12-2-20.csv', index_col=0)\n","#df.head(2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":497},"id":"NnFnlJ4ON3V8","executionInfo":{"status":"ok","timestamp":1607238263752,"user_tz":300,"elapsed":336,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"97b7e377-820a-494c-9c9a-e2fc14be0ea3"},"source":["df.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>time_retrieved</th>\n","      <th>text</th>\n","      <th>created_at</th>\n","      <th>favorite_count</th>\n","      <th>retweet_count</th>\n","      <th>place</th>\n","      <th>coordinates</th>\n","      <th>user_id</th>\n","      <th>screen_name</th>\n","      <th>user_description</th>\n","      <th>user_follower_count</th>\n","      <th>verified</th>\n","      <th>user_location</th>\n","      <th>City</th>\n","      <th>State</th>\n","      <th>Country</th>\n","    </tr>\n","    <tr>\n","      <th>status_id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1327298633683791872</th>\n","      <td>2020-11-16  21:14</td>\n","      <td>Facts: \\r\\n\\r\\nChernobyl doesn't prove that nu...</td>\n","      <td>2020-11-13 17:13:48</td>\n","      <td>348.0</td>\n","      <td>74.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4.116028e+07</td>\n","      <td>prageru</td>\n","      <td>Free Videos. Free Minds.</td>\n","      <td>563593.0</td>\n","      <td>True</td>\n","      <td>los angeles</td>\n","      <td>los angeles</td>\n","      <td>ca</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>1328517972026159104</th>\n","      <td>2020-11-16  21:14</td>\n","      <td>Microreactors are the smallest class of nuclea...</td>\n","      <td>2020-11-17 01:59:01</td>\n","      <td>20.0</td>\n","      <td>6.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>1328409437757968385</th>\n","      <td>2020-11-16  21:14</td>\n","      <td>Nice resource on global nuclear energy statist...</td>\n","      <td>2020-11-16 18:47:45</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>1328407132925026311</th>\n","      <td>2020-11-16  21:14</td>\n","      <td>Excited to see @ENERGY and @NASA's strong part...</td>\n","      <td>2020-11-16 18:38:35</td>\n","      <td>0.0</td>\n","      <td>15.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","    <tr>\n","      <th>1328367476908896260</th>\n","      <td>2020-11-16  21:14</td>\n","      <td>VIRTUAL EVENT: @ENERGY and industry experts di...</td>\n","      <td>2020-11-16 16:01:01</td>\n","      <td>11.0</td>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>1.100064e+18</td>\n","      <td>GovNuclear</td>\n","      <td>Making nuclear cool again 😎. Advancing new tec...</td>\n","      <td>12137.0</td>\n","      <td>True</td>\n","      <td>washington, dc</td>\n","      <td>dc</td>\n","      <td>md</td>\n","      <td>USA</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                        time_retrieved  ... Country\n","status_id                               ...        \n","1327298633683791872  2020-11-16  21:14  ...     USA\n","1328517972026159104  2020-11-16  21:14  ...     USA\n","1328409437757968385  2020-11-16  21:14  ...     USA\n","1328407132925026311  2020-11-16  21:14  ...     USA\n","1328367476908896260  2020-11-16  21:14  ...     USA\n","\n","[5 rows x 16 columns]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"HoGlE3nOI7i8"},"source":["### Clean text and tokenize"]},{"cell_type":"code","metadata":{"id":"Ii1uJvgmI7i9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607238269002,"user_tz":300,"elapsed":3064,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"50557627-9251-4904-f632-6b88099291b6"},"source":["# Convert to list \n","data = df.text.values.tolist()  \n","# Remove @ addresses \n","data = [re.sub(r'\\S*@\\S*\\s?', '', sent) for sent in data]  \n","# Remove web addresses\n","data = [re.sub(r'https?://\\S+', '', sent) for sent in data]  \n","# Remove new line characters \n","data = [re.sub(r'\\s+', ' ', sent) for sent in data]  \n","# Remove single quotes \n","data = [re.sub(\"\\'\", \"\", sent) for sent in data]  \n","def sent_to_words(sentences):\n","    for sentence in sentences:\n","        yield(gensim.utils.simple_preprocess(str(sentence),min_len=3, max_len=15, deacc=True))            #deacc=True removes punctuations\n","data_words = list(sent_to_words(data))\n","print(data_words[:1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[['facts', 'chernobyl', 'doesnt', 'prove', 'that', 'nuclear', 'energy', 'dangerous', 'shows', 'the', 'failures', 'the', 'communist', 'soviet', 'union', 'the', 'accident', 'turned', 'into', 'catastrophe', 'because', 'pitiful', 'safety', 'procedures', 'even', 'initial', 'reports', 'radiation', 'turned', 'out', 'grossly', 'exaggerated']]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jmNRa-7yI7i9"},"source":["### Making bigrams and trigrams"]},{"cell_type":"code","metadata":{"id":"PQ_rm097I7i9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607238278991,"user_tz":300,"elapsed":9985,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"fdf56595-816b-4c98-efee-4cdad01519d0"},"source":["# Build the bigram and trigram models\n","bigram = gensim.models.Phrases(data_words, min_count=5, threshold=100) # higher threshold, fewer phrases.\n","trigram = gensim.models.Phrases(bigram[data_words], threshold=100)\n","# Fet a sentence clubbed as a trigram/bigram\n","bigram_mod = gensim.models.phrases.Phraser(bigram)\n","trigram_mod = gensim.models.phrases.Phraser(trigram)\n","# trigram example\n","print(trigram_mod[bigram_mod[data_words[0]]])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/gensim/models/phrases.py:598: UserWarning: For a faster implementation, use the gensim.models.phrases.Phraser class\n","  warnings.warn(\"For a faster implementation, use the gensim.models.phrases.Phraser class\")\n"],"name":"stderr"},{"output_type":"stream","text":["['facts', 'chernobyl_doesnt_prove', 'that', 'nuclear', 'energy', 'dangerous', 'shows', 'the', 'failures', 'the', 'communist_soviet_union', 'the', 'accident_turned_into', 'catastrophe_because_pitiful', 'safety', 'procedures', 'even', 'initial_reports', 'radiation', 'turned', 'out', 'grossly_exaggerated']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6oAlX1p5I7i9"},"source":["# Define function for stopwords, bigrams, trigrams and lemmatization\n","def remove_stopwords(texts):\n","    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]\n","\n","def make_bigrams(texts):\n","    return [bigram_mod[doc] for doc in texts]\n","\n","def make_trigrams(texts):\n","    return [trigram_mod[bigram_mod[doc]] for doc in texts]\n","\n","def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):\n","    \"\"\"https://spacy.io/api/annotation\"\"\"\n","    texts_out = []\n","    for sent in texts:\n","        doc = nlp(\" \".join(sent)) \n","        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])\n","    return texts_out"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"H2PFhqbaI7i9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1607238368386,"user_tz":300,"elapsed":97156,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"84a0f7fe-aa09-4ea0-9e9e-549ebbe87fd6"},"source":["# Remove Stop Words\n","data_words_nostops = remove_stopwords(data_words)\n","\n","# Form Bigrams\n","data_words_bigrams = make_bigrams(data_words_nostops)\n","\n","# Form Trigrams\n","data_words_bigrams = make_trigrams(data_words_nostops)\n","\n","# Initialize spacy English model, keeping only tagger component (for efficiency)\n","nlp = spacy.load('en_core_web_sm', disable=['parser', 'ner'])\n","\n","# Do lemmatization keeping only noun, adj, vb, adv\n","data_lemmatized = lemmatization(data_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])\n","\n","print(data_lemmatized[:1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[['fact', 'chernobyl_doesnt_prove', 'dangerous', 'show', 'failure', 'catastrophe', 'pitiful_safety', 'procedure', 'even', 'initial_report', 'radiation', 'turn']]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JpYQivaDI7i9"},"source":["# Create Dictionary \n","id2word = corpora.Dictionary(data_lemmatized)  \n","# Create Corpus \n","texts = data_lemmatized  \n","# Term Document Frequency \n","corpus = [id2word.doc2bow(text) for text in texts]  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ztfah8WYOcvi","executionInfo":{"status":"ok","timestamp":1607238369102,"user_tz":300,"elapsed":95308,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"66e10fdc-0018-4110-ed37-5da167d66640"},"source":["print(corpus[:1])\n","[[(id2word[id], freq) for id, freq in cp] for cp in corpus[:1]]"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1)]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[[('catastrophe', 1),\n","  ('chernobyl_doesnt_prove', 1),\n","  ('dangerous', 1),\n","  ('even', 1),\n","  ('fact', 1),\n","  ('failure', 1),\n","  ('initial_report', 1),\n","  ('pitiful_safety', 1),\n","  ('procedure', 1),\n","  ('radiation', 1),\n","  ('show', 1),\n","  ('turn', 1)]]"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"HtkcqiemI7i9"},"source":["#Create the Model\n","lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,\n","                                           id2word=id2word,\n","                                           num_topics=70,\n","                                           random_state=100,\n","                                           update_every=1,\n","                                           chunksize=100,\n","                                           passes=5,\n","                                           alpha='auto',\n","                                           per_word_topics=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e-qxFUX0I7i9"},"source":["### Find the maximum coherence score "]},{"cell_type":"code","metadata":{"id":"E7p6FD8LI7i9"},"source":["def coherence_values_computation(dictionary, corpus, texts, limit, start=20, step=10):\n","    coherence_values = []\n","    model_list = []\n","    for num_topics in range(start, limit, step):\n","        model = gensim.models.ldamodel.LdaModel(corpus=corpus,\n","                                           id2word=id2word,\n","                                           num_topics=num_topics,\n","                                           random_state=100,\n","                                           update_every=1,\n","                                           chunksize=100,\n","                                           passes=5,\n","                                           alpha='auto',\n","                                           per_word_topics=True)\n","        model_list.append(model)\n","        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')\n","        coherence_values.append(coherencemodel.get_coherence())\n","    return model_list, coherence_values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"szc80TiyI7i9"},"source":["model_list, coherence_values = coherence_values_computation(id2word, corpus, texts, 120)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HsXRZ5aKV5E8","executionInfo":{"status":"ok","timestamp":1607246288314,"user_tz":300,"elapsed":374,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"c45939eb-72e2-47f3-e1e3-03cb4c015604"},"source":["for m, cv in zip(x, coherence_values):\n","    print(\"Num Topics =\", m, \" has Coherence Value of\", round(cv, 4))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Num Topics = 20  has Coherence Value of 0.4404\n","Num Topics = 30  has Coherence Value of 0.4406\n","Num Topics = 40  has Coherence Value of 0.4726\n","Num Topics = 50  has Coherence Value of 0.4865\n","Num Topics = 60  has Coherence Value of 0.5011\n","Num Topics = 70  has Coherence Value of 0.4991\n","Num Topics = 80  has Coherence Value of 0.4847\n","Num Topics = 90  has Coherence Value of 0.3907\n","Num Topics = 100  has Coherence Value of 0.5448\n","Num Topics = 110  has Coherence Value of 0.5403\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E8r5TEQWWbjD","executionInfo":{"status":"ok","timestamp":1607246397197,"user_tz":300,"elapsed":354,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"a8636f70-9df9-408d-caab-84d41da76041"},"source":["model_list[5]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<gensim.models.ldamodel.LdaModel at 0x7f3322f21c88>"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"scrolled":true,"id":"jqxl806bI7i9","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1607244934071,"user_tz":300,"elapsed":2724244,"user":{"displayName":"di wu","photoUrl":"","userId":"13335490941904566578"}},"outputId":"9f022501-cd75-448e-90ab-2a5a32e407f4"},"source":["x = range(20, 120, 10)\n","plt.plot(x, coherence_values)\n","plt.xlabel(\"Num Topics\")\n","#plt.ylabel(\"Coherence score\")\n","plt.title(\"Coherence Score\")\n","#plt.legend((\"Coherence\"), loc='lower right')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"m4LCfMmpI7i9"},"source":["### Evaluations of topic model\n","- The lower the perplexity better the model.\n","- The higher the topic coherence, the topic is more human interpretable."]},{"cell_type":"code","metadata":{"scrolled":true,"id":"gETzM2vcI7i9"},"source":["# Compute Perplexity\n","optimal_model = model_list[5]\n","print('\\nPerplexity: ', optimal_model.log_perplexity(corpus))  \n","# a measure of how good the model is. lower the better.\n","\n","# Compute Coherence Score\n","coherence_model_lda = CoherenceModel(model=optimal_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')\n","coherence_lda = coherence_model_lda.get_coherence()\n","print('\\nCoherence Score: ', coherence_lda)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-nG2TJxuI7jE"},"source":["### Visualization"]},{"cell_type":"code","metadata":{"id":"-8_rMXymI7jE"},"source":["# Visualize the topics\n","pyLDAvis.enable_notebook()\n","vis = pyLDAvis.gensim.prepare(lda_model, corpus, id2word, mds='mmds')\n","vis"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jd7m6T5YfWYL"},"source":["def format_topics_sentences(ldamodel=lda_model, corpus=corpus, texts=data):\n","    # Init output\n","    sent_topics_df = pd.DataFrame()\n","\n","    # Get main topic in each document\n","    for i, row in enumerate(ldamodel[corpus]):\n","        row = sorted(row, key=lambda x: (x[1]), reverse=True)\n","        # Get the Dominant topic, Perc Contribution and Keywords for each document\n","        for j, (topic_num, prop_topic) in enumerate(row):\n","            if j == 0:  # => dominant topic\n","                wp = ldamodel.show_topic(topic_num)\n","                topic_keywords = \", \".join([word for word, prop in wp])\n","                sent_topics_df = sent_topics_df.append(pd.Series([int(topic_num), round(prop_topic,4), topic_keywords]), ignore_index=True)\n","            else:\n","                break\n","    sent_topics_df.columns = ['Dominant_Topic', 'Perc_Contribution', 'Topic_Keywords']\n","\n","    # Add original text to the end of the output\n","    contents = pd.Series(texts)\n","    sent_topics_df = pd.concat([sent_topics_df, contents], axis=1)\n","    return(sent_topics_df)\n","\n","\n","df_topic_sents_keywords = format_topics_sentences(ldamodel=optimal_model, corpus=corpus, texts=data)\n","\n","# Format\n","df_dominant_topic = df_topic_sents_keywords.reset_index()\n","df_dominant_topic.columns = ['Document_No', 'Dominant_Topic', 'Topic_Perc_Contrib', 'Keywords', 'Text']\n","\n","# Show\n","df_dominant_topic.head(10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dcwr7OAygVXH"},"source":["for i, row in enumerate(optimal_model[corpus]):\n","  print(row)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZtUsTK7vI7jE"},"source":["### TBD...."]},{"cell_type":"code","metadata":{"id":"ZSNfxpZGI7jE","outputId":"d8f50d30-9055-437a-e1e8-a6fa9bc3e6a4"},"source":["lda_model.show_topics(50)[8]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(8,\n"," '0.390*\"source\" + 0.225*\"keep\" + 0.065*\"complete\" + 0.039*\"deliver\" + 0.012*\"mar\" + 0.006*\"warm\" + 0.000*\"npps\" + 0.000*\"maneuvering\" + 0.000*\"hjxc\" + 0.000*\"ppcrvddncw\"')"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"scrolled":true,"id":"1iIKzdC9I7jE","outputId":"b1066a61-a2fe-48ba-cae9-1fe746306f3b"},"source":["for idx, topic in lda_model.print_topics(-1):\n","    print(\"Topic: {} \\nWords: {}\".format(idx, topic ))\n","    print(\"\\n\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Topic: 0 \n","Words: 0.811*\"reactor\" + 0.149*\"fuel\" + 0.000*\"additionally\" + 0.000*\"intended\" + 0.000*\"subtle\" + 0.000*\"abstention\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"verifiably\" + 0.000*\"looking_forward\"\n","\n","\n","Topic: 1 \n","Words: 0.275*\"country\" + 0.188*\"lead\" + 0.170*\"global\" + 0.089*\"leadership\" + 0.068*\"combine\" + 0.007*\"united_state\" + 0.000*\"reaffirm\" + 0.000*\"abstention\" + 0.000*\"commence\" + 0.000*\"additionally\"\n","\n","\n","Topic: 2 \n","Words: 0.627*\"learn\" + 0.112*\"commercial\" + 0.030*\"powerful\" + 0.026*\"treat\" + 0.009*\"extreme\" + 0.000*\"additionally\" + 0.000*\"intended\" + 0.000*\"subtle\" + 0.000*\"applicability\" + 0.000*\"looking_forward\"\n","\n","\n","Topic: 3 \n","Words: 0.614*\"time\" + 0.099*\"love\" + 0.056*\"ready\" + 0.000*\"abstention\" + 0.000*\"reaffirm\" + 0.000*\"commence\" + 0.000*\"intended\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"treatie\"\n","\n","\n","Topic: 4 \n","Words: 0.155*\"expert\" + 0.121*\"set\" + 0.092*\"remain\" + 0.084*\"especially\" + 0.072*\"business\" + 0.057*\"ahead\" + 0.056*\"game\" + 0.049*\"serious\" + 0.037*\"present\" + 0.015*\"cybersecurity\"\n","\n","\n","Topic: 5 \n","Words: 0.545*\"use\" + 0.072*\"announce\" + 0.069*\"process\" + 0.062*\"market\" + 0.055*\"open\" + 0.033*\"fossil_fuel\" + 0.024*\"next_generation\" + 0.016*\"mainly\" + 0.012*\"decarbonize\" + 0.000*\"additionally\"\n","\n","\n","Topic: 6 \n","Words: 0.224*\"high\" + 0.185*\"may\" + 0.154*\"long\" + 0.150*\"part\" + 0.107*\"lot\" + 0.031*\"nearly\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"abstention\" + 0.000*\"looking_forward\"\n","\n","\n","Topic: 7 \n","Words: 0.216*\"well\" + 0.160*\"still\" + 0.089*\"operation\" + 0.079*\"tech\" + 0.075*\"company\" + 0.063*\"potential\" + 0.048*\"effort\" + 0.043*\"feature\" + 0.028*\"conversation\" + 0.027*\"worth\"\n","\n","\n","Topic: 8 \n","Words: 0.348*\"think\" + 0.182*\"renewable\" + 0.158*\"generation\" + 0.102*\"grid\" + 0.065*\"demand\" + 0.009*\"flexible\" + 0.000*\"looking_forward\" + 0.000*\"kickoff\" + 0.000*\"subtle\" + 0.000*\"treatie\"\n","\n","\n","Topic: 9 \n","Words: 0.377*\"get\" + 0.112*\"production\" + 0.112*\"fund\" + 0.058*\"regulatory\" + 0.047*\"expand\" + 0.041*\"award\" + 0.036*\"resource\" + 0.023*\"hydrogen\" + 0.022*\"utilize\" + 0.015*\"recently\"\n","\n","\n","Topic: 10 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","\n","Topic: 11 \n","Words: 0.373*\"need\" + 0.129*\"source\" + 0.100*\"believe\" + 0.095*\"report\" + 0.041*\"advocate\" + 0.038*\"value\" + 0.038*\"meeting\" + 0.030*\"several\" + 0.030*\"application\" + 0.027*\"care\"\n","\n","\n","Topic: 12 \n","Words: 0.250*\"test\" + 0.185*\"big\" + 0.159*\"watch\" + 0.149*\"happen\" + 0.069*\"visit\" + 0.047*\"conference\" + 0.009*\"loss\" + 0.000*\"reaffirm\" + 0.000*\"additionally\" + 0.000*\"subtle\"\n","\n","\n","Topic: 13 \n","Words: 0.375*\"clean\" + 0.242*\"include\" + 0.148*\"solution\" + 0.055*\"event\" + 0.040*\"available\" + 0.000*\"commence\" + 0.000*\"abstention\" + 0.000*\"intended\" + 0.000*\"looking_forward\" + 0.000*\"additionally\"\n","\n","\n","Topic: 14 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","\n","Topic: 15 \n","Words: 0.284*\"help\" + 0.174*\"exist\" + 0.088*\"propose\" + 0.083*\"fast\" + 0.079*\"require\" + 0.041*\"speed\" + 0.024*\"versatile_test_reactor\" + 0.020*\"fleet\" + 0.015*\"sensor\" + 0.006*\"moderate\"\n","\n","\n","Topic: 16 \n","Words: 0.270*\"future\" + 0.135*\"security\" + 0.124*\"provide\" + 0.093*\"national\" + 0.069*\"role\" + 0.048*\"innovation\" + 0.044*\"economic\" + 0.036*\"key\" + 0.027*\"essential\" + 0.025*\"reality\"\n","\n","\n","Topic: 17 \n","Words: 0.236*\"support\" + 0.228*\"industry\" + 0.150*\"system\" + 0.076*\"late\" + 0.056*\"strong\" + 0.050*\"advance\" + 0.033*\"drive\" + 0.023*\"moon\" + 0.020*\"extend\" + 0.013*\"partnership\"\n","\n","\n","Topic: 18 \n","Words: 0.405*\"come\" + 0.353*\"check\" + 0.000*\"intended\" + 0.000*\"subtle\" + 0.000*\"reaffirm\" + 0.000*\"commence\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"verifiably\" + 0.000*\"additionally\"\n","\n","\n","Topic: 19 \n","Words: 0.271*\"build\" + 0.216*\"could\" + 0.163*\"design\" + 0.156*\"way\" + 0.110*\"see\" + 0.014*\"completely\" + 0.000*\"certify\" + 0.000*\"reaffirm\" + 0.000*\"verifiably\" + 0.000*\"commence\"\n","\n","\n","Topic: 20 \n","Words: 0.337*\"project\" + 0.228*\"program\" + 0.172*\"join\" + 0.033*\"update\" + 0.000*\"kickoff\" + 0.000*\"intended\" + 0.000*\"abstention\" + 0.000*\"treatie\" + 0.000*\"reaffirm\" + 0.000*\"subtle\"\n","\n","\n","Topic: 21 \n","Words: 0.298*\"produce\" + 0.292*\"create\" + 0.058*\"mind\" + 0.050*\"concept\" + 0.050*\"other\" + 0.024*\"certain\" + 0.018*\"component\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"reaffirm\"\n","\n","\n","Topic: 22 \n","Words: 0.498*\"people\" + 0.228*\"today\" + 0.070*\"enough\" + 0.068*\"supply\" + 0.000*\"additionally\" + 0.000*\"intended\" + 0.000*\"abstention\" + 0.000*\"subtle\" + 0.000*\"looking_forward\" + 0.000*\"verifiably\"\n","\n","\n","Topic: 23 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","\n","Topic: 24 \n","Words: 0.218*\"plan\" + 0.135*\"risk\" + 0.134*\"increase\" + 0.071*\"recent\" + 0.062*\"launch\" + 0.052*\"study\" + 0.044*\"student\" + 0.032*\"link\" + 0.028*\"improve\" + 0.027*\"thought\"\n","\n","\n","Topic: 25 \n","Words: 0.254*\"thing\" + 0.201*\"good\" + 0.200*\"start\" + 0.169*\"look\" + 0.059*\"place\" + 0.000*\"simulation\" + 0.000*\"subtle\" + 0.000*\"reaffirm\" + 0.000*\"commence\" + 0.000*\"intended\"\n","\n","\n","Topic: 26 \n","Words: 0.445*\"work\" + 0.160*\"find\" + 0.068*\"team\" + 0.068*\"consider\" + 0.066*\"apply\" + 0.038*\"opportunity\" + 0.024*\"fight\" + 0.000*\"additionally\" + 0.000*\"intended\" + 0.000*\"subtle\"\n","\n","\n","Topic: 27 \n","Words: 0.410*\"make\" + 0.192*\"world\" + 0.049*\"power\" + 0.041*\"possible\" + 0.038*\"base\" + 0.032*\"man\" + 0.031*\"woman\" + 0.022*\"mini\" + 0.020*\"prove\" + 0.018*\"license\"\n","\n","\n","Topic: 28 \n","Words: 0.172*\"must\" + 0.163*\"continue\" + 0.107*\"grow\" + 0.106*\"thank\" + 0.079*\"home\" + 0.048*\"american\" + 0.032*\"invest\" + 0.030*\"yesterday\" + 0.024*\"welcome\" + 0.023*\"service\"\n","\n","\n","Topic: 29 \n","Words: 0.391*\"new\" + 0.201*\"technology\" + 0.168*\"take\" + 0.084*\"research\" + 0.057*\"development\" + 0.024*\"video\" + 0.000*\"abstention\" + 0.000*\"reaffirm\" + 0.000*\"intended\" + 0.000*\"treatie\"\n","\n","\n","Topic: 30 \n","Words: 0.579*\"year\" + 0.155*\"nation\" + 0.132*\"large\" + 0.002*\"producer\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\" + 0.000*\"additionally\" + 0.000*\"kickoff\" + 0.000*\"looking_forward\"\n","\n","\n","Topic: 31 \n","Words: 0.231*\"want\" + 0.216*\"read\" + 0.130*\"construction\" + 0.071*\"hot\" + 0.047*\"reach\" + 0.035*\"history\" + 0.030*\"goal\" + 0.027*\"handle\" + 0.024*\"stuff\" + 0.023*\"air\"\n","\n","\n","Topic: 32 \n","Words: 0.264*\"last\" + 0.183*\"live\" + 0.145*\"space\" + 0.071*\"crime\" + 0.063*\"move\" + 0.036*\"avoid\" + 0.029*\"explore\" + 0.022*\"carbon_emission\" + 0.015*\"solid\" + 0.003*\"million_metric_ton\"\n","\n","\n","Topic: 33 \n","Words: 0.418*\"go\" + 0.211*\"change\" + 0.083*\"virtual\" + 0.069*\"head\" + 0.056*\"meet\" + 0.000*\"intended\" + 0.000*\"reaffirm\" + 0.000*\"additionally\" + 0.000*\"kickoff\" + 0.000*\"treatie\"\n","\n","\n","Topic: 34 \n","Words: 0.285*\"science\" + 0.193*\"explain\" + 0.096*\"engineer\" + 0.052*\"recycle\" + 0.051*\"minute\" + 0.032*\"serve\" + 0.000*\"looking_forward\" + 0.000*\"treatie\" + 0.000*\"subtle\" + 0.000*\"additionally\"\n","\n","\n","Topic: 35 \n","Words: 0.285*\"would\" + 0.140*\"develop\" + 0.131*\"even\" + 0.115*\"site\" + 0.076*\"material\" + 0.052*\"next\" + 0.048*\"release\" + 0.029*\"discuss\" + 0.028*\"gas\" + 0.015*\"light\"\n","\n","\n","Topic: 36 \n","Words: 0.271*\"small\" + 0.166*\"ever\" + 0.105*\"testing\" + 0.060*\"inside\" + 0.050*\"wonder\" + 0.047*\"self\" + 0.032*\"class\" + 0.031*\"demonstration\" + 0.022*\"host\" + 0.014*\"microreactor\"\n","\n","\n","Topic: 37 \n","Words: 0.236*\"electricity\" + 0.155*\"day\" + 0.141*\"ever_produce\" + 0.127*\"deal\" + 0.115*\"generate\" + 0.044*\"hour\" + 0.036*\"record\" + 0.012*\"listen\" + 0.000*\"applicability\" + 0.000*\"treatie\"\n","\n","\n","Topic: 38 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","\n","Topic: 39 \n","Words: 0.229*\"great\" + 0.138*\"leader\" + 0.136*\"engineering\" + 0.118*\"end\" + 0.102*\"decade\" + 0.034*\"wait\" + 0.024*\"establish\" + 0.023*\"deployment\" + 0.016*\"night\" + 0.012*\"enjoy\"\n","\n","\n","Topic: 40 \n","Words: 0.744*\"waste\" + 0.070*\"radioactive\" + 0.054*\"store\" + 0.025*\"safely\" + 0.013*\"number\" + 0.010*\"promote\" + 0.007*\"charge\" + 0.007*\"cooperation\" + 0.006*\"chief\" + 0.005*\"officer\"\n","\n","\n","Topic: 41 \n","Words: 0.227*\"safe\" + 0.185*\"s\" + 0.071*\"far\" + 0.068*\"spend\" + 0.064*\"talk\" + 0.062*\"real\" + 0.038*\"environmental\" + 0.034*\"agree\" + 0.031*\"management\" + 0.030*\"international\"\n","\n","\n","Topic: 42 \n","Words: 0.200*\"full\" + 0.136*\"public\" + 0.117*\"always\" + 0.089*\"operate\" + 0.053*\"advancednuclear\" + 0.043*\"discussion\" + 0.042*\"register\" + 0.035*\"sector\" + 0.031*\"panel\" + 0.028*\"restore\"\n","\n","\n","Topic: 43 \n","Words: 0.343*\"radiation\" + 0.179*\"say\" + 0.065*\"keep\" + 0.047*\"fact\" + 0.041*\"show\" + 0.040*\"dangerous\" + 0.035*\"deliver\" + 0.035*\"bring\" + 0.033*\"turn\" + 0.029*\"impact\"\n","\n","\n","Topic: 44 \n","Words: 0.664*\"plant\" + 0.080*\"top\" + 0.074*\"accord\" + 0.007*\"historic\" + 0.000*\"intended\" + 0.000*\"additionally\" + 0.000*\"reaffirm\" + 0.000*\"commence\" + 0.000*\"treatie\" + 0.000*\"looking_forward\"\n","\n","\n","Topic: 45 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","\n","Topic: 46 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","\n","Topic: 47 \n","Words: 0.431*\"know\" + 0.322*\"advanced\" + 0.050*\"nee\" + 0.035*\"simple\" + 0.000*\"intended\" + 0.000*\"additionally\" + 0.000*\"abstention\" + 0.000*\"reaffirm\" + 0.000*\"applicability\" + 0.000*\"kickoff\"\n","\n","\n","Topic: 48 \n","Words: 0.309*\"facility\" + 0.161*\"old\" + 0.122*\"share\" + 0.056*\"cool\" + 0.055*\"here\" + 0.045*\"school\" + 0.034*\"revive\" + 0.013*\"ability\" + 0.000*\"correspond\" + 0.000*\"bully\"\n","\n","\n","Topic: 49 \n","Words: 0.137*\"reduce\" + 0.132*\"state\" + 0.113*\"close\" + 0.083*\"emission\" + 0.069*\"economy\" + 0.066*\"month\" + 0.061*\"current\" + 0.054*\"free\" + 0.050*\"critical\" + 0.049*\"climatechange\"\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"collapsed":true,"id":"O_zYytLtI7jE","outputId":"6c3133eb-12ef-47e5-a9c6-5c82131c4bf8"},"source":["for id, topic in lda_model.show_topics(num_topics=10,num_words=10):\n","   print('Topic: {} \\nWords: {}\\n'.format(id, topic))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Topic: 45 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","Topic: 10 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","Topic: 14 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","Topic: 23 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","Topic: 38 \n","Words: 0.000*\"abstention\" + 0.000*\"verifiably\" + 0.000*\"applicability\" + 0.000*\"kickoff\" + 0.000*\"treatie\" + 0.000*\"looking_forward\" + 0.000*\"additionally\" + 0.000*\"subtle\" + 0.000*\"intended\" + 0.000*\"reaffirm\"\n","\n","Topic: 19 \n","Words: 0.271*\"build\" + 0.216*\"could\" + 0.163*\"design\" + 0.156*\"way\" + 0.110*\"see\" + 0.014*\"completely\" + 0.000*\"certify\" + 0.000*\"reaffirm\" + 0.000*\"verifiably\" + 0.000*\"commence\"\n","\n","Topic: 41 \n","Words: 0.227*\"safe\" + 0.185*\"s\" + 0.071*\"far\" + 0.068*\"spend\" + 0.064*\"talk\" + 0.062*\"real\" + 0.038*\"environmental\" + 0.034*\"agree\" + 0.031*\"management\" + 0.030*\"international\"\n","\n","Topic: 35 \n","Words: 0.285*\"would\" + 0.140*\"develop\" + 0.131*\"even\" + 0.115*\"site\" + 0.076*\"material\" + 0.052*\"next\" + 0.048*\"release\" + 0.029*\"discuss\" + 0.028*\"gas\" + 0.015*\"light\"\n","\n","Topic: 43 \n","Words: 0.343*\"radiation\" + 0.179*\"say\" + 0.065*\"keep\" + 0.047*\"fact\" + 0.041*\"show\" + 0.040*\"dangerous\" + 0.035*\"deliver\" + 0.035*\"bring\" + 0.033*\"turn\" + 0.029*\"impact\"\n","\n","Topic: 29 \n","Words: 0.391*\"new\" + 0.201*\"technology\" + 0.168*\"take\" + 0.084*\"research\" + 0.057*\"development\" + 0.024*\"video\" + 0.000*\"abstention\" + 0.000*\"reaffirm\" + 0.000*\"intended\" + 0.000*\"treatie\"\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Xu1S7FwCI7jF"},"source":["### Get example of tweets contributing to each topic.  "]},{"cell_type":"code","metadata":{"id":"TDYT4Z_TI7jF"},"source":["#with the help of: \n","#https://www.tutorialspoint.com/gensim/gensim_documents_and_lda_model.htm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6Wva5D_uI7jF"},"source":["def dominant_topics(ldamodel=lda_model, corpus=corpus, texts=data):\n","    import pandas as pd \n","    sent_topics_df = pd.DataFrame()\n","    for i, row in enumerate(ldamodel[corpus]): #for each topic\n","        row = sorted(row, key=lambda x: x[1], reverse=True)\n","        print (row)\n","        for j, (topic_num, prop_topic) in enumerate(row):\n","            if j == 0: # => dominant topic\n","                wp = ldamodel.show_topic(topic_num)\n","                topic_keywords = \", \".join([word for word, prop in wp])\n","                sent_topics_df = sent_topics_df.append(\n","                    pd.Series([int(topic_num), round(prop_topic,4), topic_keywords]), ignore_index=True\n","                )\n","            else:\n","                break\n","\n","    sent_topics_df.columns = ['Dominant_Topic', 'Perc_Contribution', 'Topic_Keywords']\n","\n","    contents = pd.Series(texts)\n","    sent_topics_df = pd.concat([sent_topics_df, contents], axis=1)\n","    return(sent_topics_df)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aI-doyKyI7jF"},"source":["# the optimal model is the one with the highest coherence\n","optimal_model = model_list[6]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5eOzbzIMI7jF","outputId":"be25589e-5d47-473d-a792-0e25766643d6"},"source":["df_topic_sents_keywords = dominant_topics(optimal_model, corpus, data) #where data is the list of semi-processed tweet text\n","\n","df_dominant_topic = df_topic_sents_keywords.reset_index()\n","df_dominant_topic.columns = [\n","    'Document_No', 'Dominant_Topic', 'Topic_Perc_Contrib', 'Keywords', 'Text'\n","]\n","\n","df_dominant_topic.head(15)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[(18, 0.021524178), (26, 0.010680787), (27, 0.01310431), (43, 0.011234394), (44, 0.012959205), (47, 0.014965717), (48, 0.011546933), (49, 0.50764763), (53, 0.014055339), (55, 0.015808526), (56, 0.021390447), (59, 0.012857975), (61, 0.010704213), (62, 0.015668824), (65, 0.010525927), (66, 0.013726139), (67, 0.012235652), (69, 0.01434966), (75, 0.016613912), (78, 0.014736985)], [(0, []), (1, []), (2, []), (3, [49]), (4, []), (5, [49]), (6, [49]), (7, [49]), (8, [49]), (9, [49]), (10, [49])], [(0, []), (1, []), (2, []), (3, [(49, 0.9999965)]), (4, []), (5, [(49, 0.9999971)]), (6, [(49, 0.99998885)]), (7, [(49, 0.99998724)]), (8, [(49, 0.9999995)]), (9, [(49, 0.99999654)]), (10, [(49, 0.9999959)])]]\n"],"name":"stdout"},{"output_type":"error","ename":"ValueError","evalue":"too many values to unpack (expected 2)","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[1;32m<ipython-input-84-6d2e5bc926f1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdf_topic_sents_keywords\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdominant_topics\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moptimal_model\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcorpus\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#where data is the list of semi-processed tweet text\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mdf_dominant_topic\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf_topic_sents_keywords\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m df_dominant_topic.columns = [\n\u001b[0;32m      5\u001b[0m     \u001b[1;34m'Document_No'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Dominant_Topic'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Topic_Perc_Contrib'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Keywords'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Text'\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32m<ipython-input-82-4c2ec99c3ade>\u001b[0m in \u001b[0;36mdominant_topics\u001b[1;34m(ldamodel, corpus, texts)\u001b[0m\n\u001b[0;32m      5\u001b[0m         \u001b[0mrow\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mx\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mreverse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m         \u001b[0mprint\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m         \u001b[1;32mfor\u001b[0m \u001b[0mj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mtopic_num\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mprop_topic\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mj\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;31m# => dominant topic\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m                 \u001b[0mwp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mldamodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshow_topic\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtopic_num\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;31mValueError\u001b[0m: too many values to unpack (expected 2)"]}]},{"cell_type":"code","metadata":{"id":"h7npXapYI7jF","outputId":"5f5590a6-249e-4535-ac10-a507f8cf7c4a"},"source":["l = [[(18, 0.021524178), (26, 0.010680787), (27, 0.01310431), (43, 0.011234394), (44, 0.012959205), (47, 0.014965717), (48, 0.011546933), (49, 0.50764763), (53, 0.014055339), (55, 0.015808526), (56, 0.021390447), (59, 0.012857975), (61, 0.010704213), (62, 0.015668824), (65, 0.010525927), (66, 0.013726139), (67, 0.012235652), (69, 0.01434966), (75, 0.016613912), (78, 0.014736985)], [(0, []), (1, []), (2, []), (3, [49]), (4, []), (5, [49]), (6, [49]), (7, [49]), (8, [49]), (9, [49]), (10, [49])], [(0, []), (1, []), (2, []), (3, [(49, 0.9999965)]), (4, []), (5, [(49, 0.9999971)]), (6, [(49, 0.99998885)]), (7, [(49, 0.99998724)]), (8, [(49, 0.9999995)]), (9, [(49, 0.99999654)]), (10, [(49, 0.9999959)])]]\n","len(l)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{"tags":[]},"execution_count":86}]},{"cell_type":"code","metadata":{"id":"xD_TmCCkI7jF","outputId":"cdc8ad4c-b073-4c31-9492-fc85af474b64"},"source":["l[2]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(0, []),\n"," (1, []),\n"," (2, []),\n"," (3, [(49, 0.9999965)]),\n"," (4, []),\n"," (5, [(49, 0.9999971)]),\n"," (6, [(49, 0.99998885)]),\n"," (7, [(49, 0.99998724)]),\n"," (8, [(49, 0.9999995)]),\n"," (9, [(49, 0.99999654)]),\n"," (10, [(49, 0.9999959)])]"]},"metadata":{"tags":[]},"execution_count":89}]},{"cell_type":"code","metadata":{"id":"Tf-Rv9z5I7jF"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JNLWko-YI7jF"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T64tc-o4I7jF"},"source":[""],"execution_count":null,"outputs":[]}]}